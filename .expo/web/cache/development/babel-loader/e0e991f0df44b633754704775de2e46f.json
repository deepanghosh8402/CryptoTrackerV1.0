{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"type\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { LongPressGestureHandler } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedGestureHandler } from 'react-native-reanimated';\nimport { parse } from 'react-native-redash';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport { useLineChart } from \"./useLineChart\";\nexport var CursorContext = React.createContext({\n  type: ''\n});\nLineChartCursor.displayName = 'LineChartCursor';\nexport function LineChartCursor(_ref) {\n  var children = _ref.children,\n      type = _ref.type,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n      width = _React$useContext.pathWidth,\n      path = _React$useContext.path;\n\n  var _useLineChart = useLineChart(),\n      currentX = _useLineChart.currentX,\n      currentIndex = _useLineChart.currentIndex,\n      isActive = _useLineChart.isActive,\n      data = _useLineChart.data;\n\n  var parsedPath = React.useMemo(function () {\n    return path ? parse(path) : undefined;\n  }, [path]);\n  var onGestureEvent = useAnimatedGestureHandler({\n    onActive: function () {\n      var _f = function _f(_ref2) {\n        var x = _ref2.x;\n\n        if (parsedPath) {\n          var boundedX = x <= width ? x : width;\n          isActive.value = true;\n          currentX.value = boundedX;\n          var minIndex = 0;\n          var boundedIndex = Math.max(minIndex, Math.round(boundedX / width / (1 / (data.length - 1))));\n          currentIndex.value = boundedIndex;\n        }\n      };\n\n      _f._closure = {\n        parsedPath: parsedPath,\n        width: width,\n        isActive: isActive,\n        currentX: currentX,\n        data: data,\n        currentIndex: currentIndex\n      };\n      _f.asString = \"function _f({x:x}){const{parsedPath,width,isActive,currentX,data,currentIndex}=jsThis._closure;{if(parsedPath){const boundedX=x<=width?x:width;isActive.value=true;currentX.value=boundedX;const minIndex=0;const boundedIndex=Math.max(minIndex,Math.round(boundedX/width/(1/(data.length-1))));currentIndex.value=boundedIndex;}}}\";\n      _f.__workletHash = 12364948846908;\n      _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\Cursor.js (31:14)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f() {\n        isActive.value = false;\n        currentIndex.value = -1;\n      };\n\n      _f._closure = {\n        isActive: isActive,\n        currentIndex: currentIndex\n      };\n      _f.asString = \"function _f(){const{isActive,currentIndex}=jsThis._closure;{isActive.value=false;currentIndex.value=-1;}}\";\n      _f.__workletHash = 8224054226314;\n      _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\Cursor.js (46:11)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }()\n  });\n  return React.createElement(CursorContext.Provider, {\n    value: {\n      type: type\n    }\n  }, React.createElement(LongPressGestureHandler, _extends({\n    minDurationMs: 0,\n    maxDist: 999999,\n    onGestureEvent: onGestureEvent\n  }, props), React.createElement(Animated.View, {\n    style: StyleSheet.absoluteFill\n  }, children)));\n}","map":{"version":3,"sources":["Cursor.tsx"],"names":["CursorContext","type","LineChartCursor","props","pathWidth","path","React","data","useLineChart","parsedPath","parse","onGestureEvent","useAnimatedGestureHandler","onActive","x","boundedX","isActive","currentX","minIndex","boundedIndex","Math","currentIndex","onEnd","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport {\n  GestureEvent,\n  LongPressGestureHandler,\n  LongPressGestureHandlerEventPayload,\n  LongPressGestureHandlerProps,\n} from 'react-native-gesture-handler';\nimport Animated, { useAnimatedGestureHandler } from 'react-native-reanimated';\nimport { parse } from 'react-native-redash';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { useLineChart } from './useLineChart';\n\nexport type LineChartCursorProps = LongPressGestureHandlerProps & {\n  children: React.ReactNode;\n  type: 'line' | 'crosshair';\n};\n\nexport const CursorContext = React.createContext({ type: '' });\n\nLineChartCursor.displayName = 'LineChartCursor';\n\nexport function LineChartCursor({\n  children,\n  type,\n  ...props\n}: LineChartCursorProps) {\n  const { pathWidth: width, path } = React.useContext(\n    LineChartDimensionsContext\n  );\n  const { currentX, currentIndex, isActive, data } = useLineChart();\n\n  const parsedPath = React.useMemo(\n    () => (path ? parse(path) : undefined),\n    [path]\n  );\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    GestureEvent<LongPressGestureHandlerEventPayload>\n  >({\n    onActive: ({ x }) => {\n      if (parsedPath) {\n        const boundedX = x <= width ? x : width;\n        isActive.value = true;\n        currentX.value = boundedX;\n\n        // on Web, we could drag the cursor to be negative, breaking it\n        // so we clamp the index at 0 to fix it\n        // https://github.com/coinjar/react-native-wagmi-charts/issues/24\n        const minIndex = 0;\n        const boundedIndex = Math.max(\n          minIndex,\n          Math.round(boundedX / width / (1 / (data.length - 1)))\n        );\n\n        currentIndex.value = boundedIndex;\n      }\n    },\n    onEnd: () => {\n      isActive.value = false;\n      currentIndex.value = -1;\n    },\n  });\n\n  return (\n    <CursorContext.Provider value={{ type }}>\n      <LongPressGestureHandler\n        minDurationMs={0}\n        maxDist={999999}\n        onGestureEvent={onGestureEvent}\n        {...props}\n      >\n        <Animated.View style={StyleSheet.absoluteFill}>\n          {children}\n        </Animated.View>\n      </LongPressGestureHandler>\n    </CursorContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}