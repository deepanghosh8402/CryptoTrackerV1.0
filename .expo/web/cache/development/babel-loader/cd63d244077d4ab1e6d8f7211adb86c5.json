{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Svg } from 'react-native-svg';\nimport Animated, { useAnimatedProps, useSharedValue, withTiming } from 'react-native-reanimated';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport { LineChartPath } from \"./Path\";\nimport { useLineChart } from \"./useLineChart\";\nvar BACKGROUND_COMPONENTS = ['LineChartHighlight', 'LineChartHorizontalLine', 'LineChartGradient', 'LineChartDot'];\nvar FOREGROUND_COMPONENTS = ['LineChartHighlight', 'LineChartDot'];\nvar AnimatedSVG = Animated.createAnimatedComponent(Svg);\nexport var LineChartPathContext = React.createContext({\n  color: '',\n  isInactive: false,\n  isTransitionEnabled: true\n});\nLineChartPathWrapper.displayName = 'LineChartPathWrapper';\nexport function LineChartPathWrapper(_ref) {\n  var _ref$animationDuratio = _ref.animationDuration,\n      animationDuration = _ref$animationDuratio === void 0 ? 300 : _ref$animationDuratio,\n      _ref$animationProps = _ref.animationProps,\n      animationProps = _ref$animationProps === void 0 ? {} : _ref$animationProps,\n      children = _ref.children,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'black' : _ref$color,\n      inactiveColor = _ref.inactiveColor,\n      _ref$width = _ref.width,\n      strokeWidth = _ref$width === void 0 ? 3 : _ref$width,\n      _ref$widthOffset = _ref.widthOffset,\n      widthOffset = _ref$widthOffset === void 0 ? 20 : _ref$widthOffset,\n      _ref$pathProps = _ref.pathProps,\n      pathProps = _ref$pathProps === void 0 ? {} : _ref$pathProps,\n      _ref$showInactivePath = _ref.showInactivePath,\n      showInactivePath = _ref$showInactivePath === void 0 ? true : _ref$showInactivePath,\n      animateOnMount = _ref.animateOnMount,\n      _ref$mountAnimationDu = _ref.mountAnimationDuration,\n      mountAnimationDuration = _ref$mountAnimationDu === void 0 ? animationDuration : _ref$mountAnimationDu,\n      _ref$mountAnimationPr = _ref.mountAnimationProps,\n      mountAnimationProps = _ref$mountAnimationPr === void 0 ? animationProps : _ref$mountAnimationPr;\n\n  var _pathProps$isTransiti, _pathProps$isTransiti2;\n\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n      height = _React$useContext.height,\n      pathWidth = _React$useContext.pathWidth,\n      width = _React$useContext.width;\n\n  var _useLineChart = useLineChart(),\n      currentX = _useLineChart.currentX,\n      isActive = _useLineChart.isActive;\n\n  var isMounted = useSharedValue(false);\n  var hasMountedAnimation = useSharedValue(false);\n  React.useEffect(function () {\n    isMounted.value = true;\n  }, []);\n  var svgProps = useAnimatedProps(function () {\n    var _f = function _f() {\n      var shouldAnimateOnMount = animateOnMount === 'foreground';\n      var inactiveWidth = !isMounted.value && shouldAnimateOnMount ? 0 : pathWidth;\n      var duration = shouldAnimateOnMount && !hasMountedAnimation.value ? mountAnimationDuration : animationDuration;\n      var props = shouldAnimateOnMount && !hasMountedAnimation.value ? mountAnimationProps : animationProps;\n\n      if (isActive.value) {\n        duration = 0;\n      }\n\n      return {\n        width: withTiming(isActive.value ? Math.max(currentX.value, 0) : inactiveWidth + widthOffset, _extends2({\n          duration: duration\n        }, props), function () {\n          var _f = function _f() {\n            hasMountedAnimation.value = true;\n          };\n\n          _f._closure = {\n            hasMountedAnimation: hasMountedAnimation\n          };\n          _f.asString = \"function _f(){const{hasMountedAnimation}=jsThis._closure;{hasMountedAnimation.value=true;}}\";\n          _f.__workletHash = 6694135524626;\n          _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\ChartPath.js (66:17)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }())\n      };\n    };\n\n    _f._closure = {\n      animateOnMount: animateOnMount,\n      isMounted: isMounted,\n      pathWidth: pathWidth,\n      hasMountedAnimation: hasMountedAnimation,\n      mountAnimationDuration: mountAnimationDuration,\n      animationDuration: animationDuration,\n      mountAnimationProps: mountAnimationProps,\n      animationProps: animationProps,\n      isActive: isActive,\n      withTiming: withTiming,\n      currentX: currentX,\n      widthOffset: widthOffset\n    };\n    _f.asString = \"function _f(){const{animateOnMount,isMounted,pathWidth,hasMountedAnimation,mountAnimationDuration,animationDuration,mountAnimationProps,animationProps,isActive,withTiming,currentX,widthOffset}=jsThis._closure;{const shouldAnimateOnMount=animateOnMount==='foreground';const inactiveWidth=!isMounted.value&&shouldAnimateOnMount?0:pathWidth;let duration=shouldAnimateOnMount&&!hasMountedAnimation.value?mountAnimationDuration:animationDuration;const props=shouldAnimateOnMount&&!hasMountedAnimation.value?mountAnimationProps:animationProps;if(isActive.value){duration=0;}return{width:withTiming(isActive.value?Math.max(currentX.value,0):inactiveWidth+widthOffset,Object.assign({duration:duration},props),function(){hasMountedAnimation.value=true;})};}}\";\n    _f.__workletHash = 15091216728833;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\ChartPath.js (51:36)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var viewSize = React.useMemo(function () {\n    return {\n      width: width,\n      height: height\n    };\n  }, [width, height]);\n  var backgroundChildren;\n  var foregroundChildren;\n\n  if (children) {\n    var iterableChildren = flattenChildren(children);\n    backgroundChildren = iterableChildren.filter(function (child) {\n      var _child$type;\n\n      return BACKGROUND_COMPONENTS.includes(child === null || child === void 0 ? void 0 : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName);\n    });\n    foregroundChildren = iterableChildren.filter(function (child) {\n      var _child$type2;\n\n      return FOREGROUND_COMPONENTS.includes(child === null || child === void 0 ? void 0 : (_child$type2 = child.type) === null || _child$type2 === void 0 ? void 0 : _child$type2.displayName);\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(LineChartPathContext.Provider, {\n    value: {\n      color: color,\n      isInactive: showInactivePath,\n      isTransitionEnabled: (_pathProps$isTransiti = pathProps.isTransitionEnabled) !== null && _pathProps$isTransiti !== void 0 ? _pathProps$isTransiti : true\n    }\n  }, React.createElement(View, {\n    style: viewSize\n  }, React.createElement(Svg, {\n    width: width,\n    height: height\n  }, React.createElement(LineChartPath, _extends({\n    color: color,\n    inactiveColor: inactiveColor,\n    width: strokeWidth\n  }, pathProps)), backgroundChildren))), React.createElement(LineChartPathContext.Provider, {\n    value: {\n      color: color,\n      isInactive: false,\n      isTransitionEnabled: (_pathProps$isTransiti2 = pathProps.isTransitionEnabled) !== null && _pathProps$isTransiti2 !== void 0 ? _pathProps$isTransiti2 : true\n    }\n  }, React.createElement(View, {\n    style: StyleSheet.absoluteFill\n  }, React.createElement(AnimatedSVG, {\n    animatedProps: svgProps,\n    height: height\n  }, React.createElement(LineChartPath, _extends({\n    color: color,\n    width: strokeWidth\n  }, pathProps)), foregroundChildren))));\n}","map":{"version":3,"sources":["ChartPath.tsx"],"names":["BACKGROUND_COMPONENTS","FOREGROUND_COMPONENTS","AnimatedSVG","Animated","LineChartPathContext","color","isInactive","isTransitionEnabled","LineChartPathWrapper","animationDuration","animationProps","width","strokeWidth","widthOffset","pathProps","showInactivePath","mountAnimationDuration","mountAnimationProps","React","isActive","useLineChart","isMounted","useSharedValue","hasMountedAnimation","svgProps","useAnimatedProps","shouldAnimateOnMount","animateOnMount","inactiveWidth","duration","props","withTiming","Math","currentX","viewSize","height","iterableChildren","flattenChildren","backgroundChildren","child","foregroundChildren","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Svg } from 'react-native-svg';\nimport Animated, {\n  useAnimatedProps,\n  useSharedValue,\n  withTiming,\n  WithTimingConfig,\n} from 'react-native-reanimated';\nimport flattenChildren from 'react-keyed-flatten-children';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPath, LineChartPathProps } from './Path';\nimport { useLineChart } from './useLineChart';\n\nconst BACKGROUND_COMPONENTS = [\n  'LineChartHighlight',\n  'LineChartHorizontalLine',\n  'LineChartGradient',\n  'LineChartDot',\n];\nconst FOREGROUND_COMPONENTS = ['LineChartHighlight', 'LineChartDot'];\n\nconst AnimatedSVG = Animated.createAnimatedComponent(Svg);\n\nexport const LineChartPathContext = React.createContext({\n  color: '',\n  isInactive: false,\n  isTransitionEnabled: true,\n});\n\ntype LineChartPathWrapperProps = {\n  animationDuration?: number;\n  animationProps?: Omit<Partial<WithTimingConfig>, 'duration'>;\n  children?: React.ReactNode;\n  color?: string;\n  inactiveColor?: string;\n  width?: number;\n  widthOffset?: number;\n  pathProps?: Partial<LineChartPathProps>;\n  showInactivePath?: boolean;\n  animateOnMount?: 'foreground';\n  mountAnimationDuration?: number;\n  mountAnimationProps?: Partial<WithTimingConfig>;\n};\n\nLineChartPathWrapper.displayName = 'LineChartPathWrapper';\n\nexport function LineChartPathWrapper({\n  animationDuration = 300,\n  animationProps = {},\n  children,\n  color = 'black',\n  inactiveColor,\n  width: strokeWidth = 3,\n  widthOffset = 20,\n  pathProps = {},\n  showInactivePath = true,\n  animateOnMount,\n  mountAnimationDuration = animationDuration,\n  mountAnimationProps = animationProps,\n}: LineChartPathWrapperProps) {\n  const { height, pathWidth, width } = React.useContext(\n    LineChartDimensionsContext\n  );\n  const { currentX, isActive } = useLineChart();\n  const isMounted = useSharedValue(false);\n  const hasMountedAnimation = useSharedValue(false);\n\n  React.useEffect(() => {\n    isMounted.value = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  ////////////////////////////////////////////////\n\n  const svgProps = useAnimatedProps(() => {\n    const shouldAnimateOnMount = animateOnMount === 'foreground';\n    const inactiveWidth =\n      !isMounted.value && shouldAnimateOnMount ? 0 : pathWidth;\n\n    let duration =\n      shouldAnimateOnMount && !hasMountedAnimation.value\n        ? mountAnimationDuration\n        : animationDuration;\n    const props =\n      shouldAnimateOnMount && !hasMountedAnimation.value\n        ? mountAnimationProps\n        : animationProps;\n\n    if (isActive.value) {\n      duration = 0;\n    }\n\n    return {\n      width: withTiming(\n        isActive.value\n          ? // on Web, <svg /> elements don't support negative widths\n            // https://github.com/coinjar/react-native-wagmi-charts/issues/24#issuecomment-955789904\n            Math.max(currentX.value, 0)\n          : inactiveWidth + widthOffset,\n        Object.assign({ duration }, props),\n        () => {\n          hasMountedAnimation.value = true;\n        }\n      ),\n    };\n  });\n\n  const viewSize = React.useMemo(() => ({ width, height }), [width, height]);\n\n  ////////////////////////////////////////////////\n\n  let backgroundChildren;\n  let foregroundChildren;\n  if (children) {\n    const iterableChildren = flattenChildren(children);\n    backgroundChildren = iterableChildren.filter((child) =>\n      // @ts-ignore\n      BACKGROUND_COMPONENTS.includes(child?.type?.displayName)\n    );\n    foregroundChildren = iterableChildren.filter((child) =>\n      // @ts-ignore\n      FOREGROUND_COMPONENTS.includes(child?.type?.displayName)\n    );\n  }\n\n  ////////////////////////////////////////////////\n\n  return (\n    <>\n      <LineChartPathContext.Provider\n        value={{\n          color,\n          isInactive: showInactivePath,\n          isTransitionEnabled: pathProps.isTransitionEnabled ?? true,\n        }}\n      >\n        <View style={viewSize}>\n          <Svg width={width} height={height}>\n            <LineChartPath\n              color={color}\n              inactiveColor={inactiveColor}\n              width={strokeWidth}\n              {...pathProps}\n            />\n            {backgroundChildren}\n          </Svg>\n        </View>\n      </LineChartPathContext.Provider>\n      <LineChartPathContext.Provider\n        value={{\n          color,\n          isInactive: false,\n          isTransitionEnabled: pathProps.isTransitionEnabled ?? true,\n        }}\n      >\n        <View style={StyleSheet.absoluteFill}>\n          <AnimatedSVG animatedProps={svgProps} height={height}>\n            <LineChartPath color={color} width={strokeWidth} {...pathProps} />\n            {foregroundChildren}\n          </AnimatedSVG>\n        </View>\n      </LineChartPathContext.Provider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}