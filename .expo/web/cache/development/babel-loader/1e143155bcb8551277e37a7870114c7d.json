{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport { runOnJS, useAnimatedReaction, useSharedValue } from 'react-native-reanimated';\nimport { LineChartDataProvider } from \"./Data\";\nimport { getDomain, lineChartDataPropToArray } from \"./utils\";\nexport var LineChartContext = React.createContext({\n  currentX: {\n    value: -1\n  },\n  currentIndex: {\n    value: -1\n  },\n  domain: [0, 0],\n  isActive: {\n    value: false\n  },\n  yDomain: {\n    min: 0,\n    max: 0\n  },\n  xLength: 0\n});\nLineChartProvider.displayName = 'LineChartProvider';\nexport function LineChartProvider(_ref) {\n  var children = _ref.children,\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? [] : _ref$data,\n      yRange = _ref.yRange,\n      onCurrentIndexChange = _ref.onCurrentIndexChange,\n      xLength = _ref.xLength;\n  var currentX = useSharedValue(-1);\n  var currentIndex = useSharedValue(-1);\n  var isActive = useSharedValue(false);\n  var domain = React.useMemo(function () {\n    return getDomain(Array.isArray(data) ? data : Object.values(data)[0]);\n  }, [data]);\n  var contextValue = React.useMemo(function () {\n    var _yRange$min, _yRange$max;\n\n    var values = lineChartDataPropToArray(data).map(function (_ref2) {\n      var value = _ref2.value;\n      return value;\n    });\n    return {\n      currentX: currentX,\n      currentIndex: currentIndex,\n      isActive: isActive,\n      domain: domain,\n      yDomain: {\n        min: (_yRange$min = yRange === null || yRange === void 0 ? void 0 : yRange.min) !== null && _yRange$min !== void 0 ? _yRange$min : Math.min.apply(Math, _toConsumableArray(values)),\n        max: (_yRange$max = yRange === null || yRange === void 0 ? void 0 : yRange.max) !== null && _yRange$max !== void 0 ? _yRange$max : Math.max.apply(Math, _toConsumableArray(values))\n      },\n      xLength: xLength !== null && xLength !== void 0 ? xLength : (Array.isArray(data) ? data : Object.values(data)[0]).length\n    };\n  }, [currentIndex, currentX, data, domain, isActive, yRange === null || yRange === void 0 ? void 0 : yRange.max, yRange === null || yRange === void 0 ? void 0 : yRange.min, xLength]);\n  useAnimatedReaction(function () {\n    var _f = function _f() {\n      return currentIndex.value;\n    };\n\n    _f._closure = {\n      currentIndex: currentIndex\n    };\n    _f.asString = \"function _f(){const{currentIndex}=jsThis._closure;{return currentIndex.value;}}\";\n    _f.__workletHash = 9366021599315;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\Context.js (52:22)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), function () {\n    var _f = function _f(x, prevX) {\n      if (x !== -1 && x !== prevX && onCurrentIndexChange) {\n        runOnJS(onCurrentIndexChange)(x);\n      }\n    };\n\n    _f._closure = {\n      onCurrentIndexChange: onCurrentIndexChange,\n      runOnJS: runOnJS\n    };\n    _f.asString = \"function _f(x,prevX){const{onCurrentIndexChange,runOnJS}=jsThis._closure;{if(x!==-1&&x!==prevX&&onCurrentIndexChange){runOnJS(onCurrentIndexChange)(x);}}}\";\n    _f.__workletHash = 13646288154104;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\Context.js (52:48)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return React.createElement(LineChartDataProvider, {\n    data: data\n  }, React.createElement(LineChartContext.Provider, {\n    value: contextValue\n  }, children));\n}","map":{"version":3,"sources":["Context.tsx"],"names":["getDomain","LineChartContext","currentX","value","currentIndex","domain","isActive","yDomain","min","max","xLength","LineChartProvider","data","useSharedValue","React","Array","Object","contextValue","values","yRange","Math","length","useAnimatedReaction","x","runOnJS"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  runOnJS,\n  useAnimatedReaction,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport type { TLineChartDataProp } from './types';\nimport { LineChartDataProvider } from './Data';\n\nimport type { TLineChartContext, YRangeProp } from './types';\nimport { getDomain, lineChartDataPropToArray } from './utils';\n\nexport const LineChartContext = React.createContext<TLineChartContext>({\n  currentX: { value: -1 },\n  currentIndex: { value: -1 },\n  domain: [0, 0],\n  isActive: { value: false },\n  yDomain: {\n    min: 0,\n    max: 0,\n  },\n  xLength: 0,\n});\n\ntype LineChartProviderProps = {\n  children: React.ReactNode;\n  data: TLineChartDataProp;\n  yRange?: YRangeProp;\n  onCurrentIndexChange?: (x: number) => void;\n  xLength?: number;\n};\n\nLineChartProvider.displayName = 'LineChartProvider';\n\nexport function LineChartProvider({\n  children,\n  data = [],\n  yRange,\n  onCurrentIndexChange,\n  xLength,\n}: LineChartProviderProps) {\n  const currentX = useSharedValue(-1);\n  const currentIndex = useSharedValue(-1);\n  const isActive = useSharedValue(false);\n\n  const domain = React.useMemo(\n    () => getDomain(Array.isArray(data) ? data : Object.values(data)[0]),\n    [data]\n  );\n\n  const contextValue = React.useMemo<TLineChartContext>(() => {\n    const values = lineChartDataPropToArray(data).map(({ value }) => value);\n\n    return {\n      currentX,\n      currentIndex,\n      isActive,\n      domain,\n      yDomain: {\n        min: yRange?.min ?? Math.min(...values),\n        max: yRange?.max ?? Math.max(...values),\n      },\n      xLength:\n        xLength ?? (Array.isArray(data) ? data : Object.values(data)[0]).length,\n    };\n  }, [\n    currentIndex,\n    currentX,\n    data,\n    domain,\n    isActive,\n    yRange?.max,\n    yRange?.min,\n    xLength,\n  ]);\n\n  useAnimatedReaction(\n    () => currentIndex.value,\n    (x, prevX) => {\n      if (x !== -1 && x !== prevX && onCurrentIndexChange) {\n        runOnJS(onCurrentIndexChange)(x);\n      }\n    }\n  );\n\n  return (\n    <LineChartDataProvider data={data}>\n      <LineChartContext.Provider value={contextValue}>\n        {children}\n      </LineChartContext.Provider>\n    </LineChartDataProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}