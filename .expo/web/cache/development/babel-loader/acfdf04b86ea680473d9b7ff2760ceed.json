{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"yGutter\", \"width\", \"height\", \"shape\", \"id\", \"absolute\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport * as d3Shape from 'd3-shape';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { LineChartContext } from \"./Context\";\nimport { LineChartIdProvider, useLineChartData } from \"./Data\";\nimport { getArea, getPath } from \"./utils\";\nexport var LineChartDimensionsContext = React.createContext({\n  width: 0,\n  height: 0,\n  path: '',\n  area: '',\n  shape: d3Shape.curveBumpX,\n  gutter: 0,\n  pathWidth: 0\n});\n\nvar _Dimensions$get = Dimensions.get('window'),\n    screenWidth = _Dimensions$get.width;\n\nLineChart.displayName = 'LineChart';\nexport function LineChart(_ref) {\n  var children = _ref.children,\n      _ref$yGutter = _ref.yGutter,\n      yGutter = _ref$yGutter === void 0 ? 16 : _ref$yGutter,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? screenWidth : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? screenWidth : _ref$height,\n      _ref$shape = _ref.shape,\n      shape = _ref$shape === void 0 ? d3Shape.curveBumpX : _ref$shape,\n      id = _ref.id,\n      absolute = _ref.absolute,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(LineChartContext),\n      yDomain = _React$useContext.yDomain,\n      xLength = _React$useContext.xLength;\n\n  var _useLineChartData = useLineChartData({\n    id: id\n  }),\n      data = _useLineChartData.data;\n\n  var pathWidth = React.useMemo(function () {\n    var allowedWidth = width;\n\n    if (xLength > data.length) {\n      allowedWidth = width * data.length / xLength;\n    }\n\n    return allowedWidth;\n  }, [data.length, width, xLength]);\n  var path = React.useMemo(function () {\n    if (data && data.length > 0) {\n      return getPath({\n        data: data,\n        width: pathWidth,\n        height: height,\n        gutter: yGutter,\n        shape: shape,\n        yDomain: yDomain\n      });\n    }\n\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain]);\n  var area = React.useMemo(function () {\n    if (data && data.length > 0) {\n      return getArea({\n        data: data,\n        width: pathWidth,\n        height: height,\n        gutter: yGutter,\n        shape: shape,\n        yDomain: yDomain\n      });\n    }\n\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain]);\n  var contextValue = React.useMemo(function () {\n    return {\n      gutter: yGutter,\n      area: area,\n      path: path,\n      width: width,\n      height: height,\n      pathWidth: pathWidth,\n      shape: shape\n    };\n  }, [yGutter, area, path, width, height, pathWidth, shape]);\n  return React.createElement(LineChartIdProvider, {\n    id: id\n  }, React.createElement(LineChartDimensionsContext.Provider, {\n    value: contextValue\n  }, React.createElement(View, _extends({}, props, {\n    style: [absolute && styles.absolute, props.style]\n  }), children)));\n}\nvar styles = StyleSheet.create({\n  absolute: {\n    position: 'absolute'\n  }\n});","map":{"version":3,"sources":["Chart.tsx"],"names":["LineChartDimensionsContext","width","height","path","area","shape","d3Shape","gutter","pathWidth","screenWidth","Dimensions","LineChart","yGutter","props","xLength","React","data","useLineChartData","id","allowedWidth","getPath","yDomain","getArea","contextValue","absolute","styles","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\n// @ts-ignore\nimport * as d3Shape from 'd3-shape';\nimport { Dimensions, StyleSheet, View, ViewProps } from 'react-native';\nimport { LineChartContext } from './Context';\nimport { LineChartIdProvider, useLineChartData } from './Data';\n\nimport { getArea, getPath } from './utils';\n\nexport const LineChartDimensionsContext = React.createContext({\n  width: 0,\n  height: 0,\n  path: '',\n  area: '',\n  shape: d3Shape.curveBumpX,\n  gutter: 0,\n  pathWidth: 0,\n});\n\ntype LineChartProps = ViewProps & {\n  children: React.ReactNode;\n  yGutter?: number;\n  width?: number;\n  height?: number;\n  shape?: unknown;\n  /**\n   * If your `LineChart.Provider` uses a dictionary with multiple IDs for multiple paths, then this field is required.\n   */\n  id?: string;\n  absolute?: boolean;\n};\n\nconst { width: screenWidth } = Dimensions.get('window');\n\nLineChart.displayName = 'LineChart';\n\nexport function LineChart({\n  children,\n  yGutter = 16,\n  width = screenWidth,\n  height = screenWidth,\n  shape = d3Shape.curveBumpX,\n  id,\n  absolute,\n  ...props\n}: LineChartProps) {\n  const { yDomain, xLength } = React.useContext(LineChartContext);\n  const { data } = useLineChartData({\n    id,\n  });\n\n  const pathWidth = React.useMemo(() => {\n    let allowedWidth = width;\n    if (xLength > data.length) {\n      allowedWidth = (width * data.length) / xLength;\n    }\n    return allowedWidth;\n  }, [data.length, width, xLength]);\n\n  const path = React.useMemo(() => {\n    if (data && data.length > 0) {\n      return getPath({\n        data,\n        width: pathWidth,\n        height,\n        gutter: yGutter,\n        shape,\n        yDomain,\n      });\n    }\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain]);\n\n  const area = React.useMemo(() => {\n    if (data && data.length > 0) {\n      return getArea({\n        data,\n        width: pathWidth,\n        height,\n        gutter: yGutter,\n        shape,\n        yDomain,\n      });\n    }\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain]);\n\n  const contextValue = React.useMemo(\n    () => ({\n      gutter: yGutter,\n      area,\n      path,\n      width,\n      height,\n      pathWidth,\n      shape,\n    }),\n    [yGutter, area, path, width, height, pathWidth, shape]\n  );\n\n  return (\n    <LineChartIdProvider id={id}>\n      <LineChartDimensionsContext.Provider value={contextValue}>\n        <View {...props} style={[absolute && styles.absolute, props.style]}>\n          {children}\n        </View>\n      </LineChartDimensionsContext.Provider>\n    </LineChartIdProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  absolute: {\n    position: 'absolute',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}