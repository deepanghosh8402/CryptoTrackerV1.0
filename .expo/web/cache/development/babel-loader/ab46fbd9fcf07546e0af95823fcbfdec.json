{"ast":null,"code":"import React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Animated, { useAnimatedProps, useAnimatedReaction } from 'react-native-reanimated';\nAnimated.addWhitelistedNativeProps({\n  text: true\n});\nvar AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\nexport var AnimatedText = function AnimatedText(_ref) {\n  var text = _ref.text,\n      style = _ref.style;\n  var inputRef = React.useRef(null);\n\n  if (Platform.OS === 'web') {\n    useAnimatedReaction(function () {\n      var _f = function _f() {\n        return text.value;\n      };\n\n      _f._closure = {\n        text: text\n      };\n      _f.asString = \"function _f(){const{text}=jsThis._closure;{return text.value;}}\";\n      _f.__workletHash = 4450901064211;\n      _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\components\\\\AnimatedText.js (22:24)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(), function () {\n      var _f = function _f(data, prevData) {\n        if (data !== prevData && inputRef.current) {\n          inputRef.current.value = data;\n        }\n      };\n\n      _f._closure = {\n        inputRef: {\n          current: inputRef.current\n        }\n      };\n      _f.asString = \"function _f(data,prevData){const{inputRef}=jsThis._closure;{if(data!==prevData&&inputRef.current){inputRef.current.value=data;}}}\";\n      _f.__workletHash = 10931996160822;\n      _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\components\\\\AnimatedText.js (24:7)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }());\n  }\n\n  var animatedProps = useAnimatedProps(function () {\n    var _f = function _f() {\n      return {\n        text: text.value\n      };\n    };\n\n    _f._closure = {\n      text: text\n    };\n    _f.asString = \"function _f(){const{text}=jsThis._closure;{return{text:text.value};}}\";\n    _f.__workletHash = 10205633828402;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\components\\\\AnimatedText.js (31:41)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return React.createElement(AnimatedTextInput, {\n    underlineColorAndroid: \"transparent\",\n    editable: false,\n    ref: Platform.select({\n      web: inputRef\n    }),\n    value: text.value,\n    style: [styles.text, style],\n    animatedProps: animatedProps\n  });\n};\nvar styles = StyleSheet.create({\n  text: {\n    color: 'black'\n  }\n});","map":{"version":3,"sources":["AnimatedText.tsx"],"names":["TextInput","Animated","text","AnimatedTextInput","AnimatedText","style","inputRef","React","Platform","useAnimatedReaction","data","animatedProps","useAnimatedProps","web","styles","color"],"mappings":"AAEA,OAAA,KAAA,MAAA,OAAA;;;;AAGA,OAAA,QAAA,IAAA,gBAAA,EAAA,mBAAA,QAAA,yBAAA;AAKAC,QAAQ,CAARA,yBAAAA,CAAmC;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAnCD;AAOA,IAAME,iBAAiB,GAAGF,QAAQ,CAARA,uBAAAA,CAA1B,SAA0BA,CAA1B;AAEA,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,OAAwC;AAAA,MAAvC,IAAuC,QAAvC,IAAuC;AAAA,MAA/BC,KAA+B,QAA/BA,KAA+B;AAClE,MAAMC,QAAQ,GAAGC,KAAK,CAALA,MAAAA,CADiD,IACjDA,CAAjB;;AAEA,MAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AAOzBC,IAAAA,mBAAmB;AAAA,6BACX;AACJ,eAAOP,IAAI,CAAX,KAAA;AAFe,OAAA;;AAAA;AAAA,cA1BvB;AA0BuB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,2BAIjB,IAJiB,EAIjB,QAJiB,EAIG;AAClB,YAAIQ,IAAI,KAAJA,QAAAA,IAAqBJ,QAAQ,CAAjC,OAAA,EAA2C;AACzCA,UAAAA,QAAQ,CAARA,OAAAA,CAAAA,KAAAA,GAAAA,IAAAA;AACD;AAPLG,OAAmB;;AAAA;AAAA;AAAA,mBAzBvB,QAAST,CAAT;AAyBuB;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,QAAnBS;AAUD;;AACD,MAAME,aAAa,GAAGC,gBAAgB;AAAA,2BAAO;AAC3C,aAAO;AACLV,QAAAA,IAAI,EAAEA,IAAI,CADL;AAAA,OAAP;AADF,KAAsC;;AAAA;AAAA,YApC/BF;AAoC+B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAtC;AAOA,SACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AACE,IAAA,qBAAqB,EADvB,aAAA;AAEE,IAAA,QAAQ,EAFV,KAAA;AAGE,IAAA,GAAG,EAAE,QAAQ,CAAR,MAAA,CAAgB;AAAEa,MAAAA,GAAG,EAAEP;AAAP,KAAhB,CAHP;AAIE,IAAA,KAAK,EAAEJ,IAAI,CAJb,KAAA;AAKE,IAAA,KAAK,EAAE,CAACY,MAAM,CAAP,IAAA,EALT,KAKS,CALT;AAME,IAAA,aAAa,EAAEH;AANjB,GAAA,CADF;AA5BK,CAAA;AAwCP,IAAMG,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BZ,EAAAA,IAAI,EAAE;AACJa,IAAAA,KAAK,EAAE;AADH;AADyB,CAAlB,CAAf","sourcesContent":["// forked from https://github.com/wcandillon/react-native-redash/blob/master/src/ReText.tsx\n\nimport React from 'react';\nimport { Platform, StyleSheet, TextProps as RNTextProps } from 'react-native';\nimport { TextInput } from 'react-native';\nimport Animated, {\n  useAnimatedProps,\n  useAnimatedReaction,\n} from 'react-native-reanimated';\n\nAnimated.addWhitelistedNativeProps({ text: true });\n\ninterface AnimatedTextProps {\n  text: Animated.SharedValue<string>;\n  style?: Animated.AnimateProps<RNTextProps>['style'];\n}\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nexport const AnimatedText = ({ text, style }: AnimatedTextProps) => {\n  const inputRef = React.useRef<any>(null); // eslint-disable-line @typescript-eslint/no-explicit-any\n\n  if (Platform.OS === 'web') {\n    // For some reason, the worklet reaction evaluates upfront regardless of any\n    // conditionals within it, causing Android to crash upon the invokation of `setNativeProps`.\n    // We are going to break the rules of hooks here so it doesn't invoke `useAnimatedReaction`\n    // for platforms outside of the web.\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedReaction(\n      () => {\n        return text.value;\n      },\n      (data, prevData) => {\n        if (data !== prevData && inputRef.current) {\n          inputRef.current.value = data;\n        }\n      }\n    );\n  }\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      text: text.value,\n      // Here we use any because the text prop is not available in the type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  });\n  return (\n    <AnimatedTextInput\n      underlineColorAndroid=\"transparent\"\n      editable={false}\n      ref={Platform.select({ web: inputRef })}\n      value={text.value}\n      style={[styles.text, style]}\n      animatedProps={animatedProps}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    color: 'black',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}