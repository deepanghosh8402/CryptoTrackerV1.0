{"ast":null,"code":"import * as React from 'react';\nexport function usePrevious(value) {\n  var ref = React.useRef();\n  React.useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}","map":{"version":3,"sources":["usePrevious.ts"],"names":["ref","React"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAO,SAAA,WAAA,CAAA,KAAA,EAAkC;AAGvC,MAAMA,GAAG,GAAGC,KAAK,CAHsB,MAG3BA,EAAZ;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBD,IAAAA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;AADFC,GAAAA,EAEG,CAPoC,KAOpC,CAFHA;AAIA,SAAOD,GAAG,CAAV,OAAA;AACD","sourcesContent":["import * as React from 'react';\n\nexport function usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = React.useRef<T>();\n  // Store current value in ref\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}