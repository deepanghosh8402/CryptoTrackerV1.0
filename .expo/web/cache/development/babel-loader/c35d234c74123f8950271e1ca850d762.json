{"ast":null,"code":"import { useAnimatedProps, useAnimatedReaction, useSharedValue, withTiming } from 'react-native-reanimated';\nimport { usePrevious } from \"../../utils\";\nimport { interpolatePath } from \"./utils\";\nexport default function useAnimatedPath(_ref) {\n  var _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n      path = _ref.path;\n  var transition = useSharedValue(0);\n  var previousPath = usePrevious(path);\n  useAnimatedReaction(function () {\n    var _f = function _f() {\n      return path;\n    };\n\n    _f._closure = {\n      path: path\n    };\n    _f.asString = \"function _f(){const{path}=jsThis._closure;{return path;}}\";\n    _f.__workletHash = 6763402263926;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\useAnimatedPath.js (10:22)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), function () {\n    var _f = function _f(_, previous) {\n      if (previous) {\n        transition.value = 0;\n        transition.value = withTiming(1);\n      }\n    };\n\n    _f._closure = {\n      transition: transition,\n      withTiming: withTiming\n    };\n    _f.asString = \"function _f(_,previous){const{transition,withTiming}=jsThis._closure;{if(previous){transition.value=0;transition.value=withTiming(1);}}}\";\n    _f.__workletHash = 10722192559423;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\useAnimatedPath.js (12:5)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [path]);\n  var animatedProps = useAnimatedProps(function () {\n    var _f = function _f() {\n      var d = path || '';\n\n      if (previousPath && enabled) {\n        var pathInterpolator = interpolatePath(previousPath, path, null);\n        d = pathInterpolator(transition.value);\n      }\n\n      return {\n        d: d\n      };\n    };\n\n    _f._closure = {\n      path: path,\n      previousPath: previousPath,\n      enabled: enabled,\n      interpolatePath: interpolatePath,\n      transition: transition\n    };\n    _f.asString = \"function _f(){const{path,previousPath,enabled,interpolatePath,transition}=jsThis._closure;{let d=path||'';if(previousPath&&enabled){const pathInterpolator=interpolatePath(previousPath,path,null);d=pathInterpolator(transition.value);}return{d:d};}}\";\n    _f.__workletHash = 15644548755987;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\useAnimatedPath.js (18:41)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return {\n    animatedProps: animatedProps\n  };\n}","map":{"version":3,"sources":["useAnimatedPath.ts"],"names":["enabled","path","transition","useSharedValue","previousPath","usePrevious","useAnimatedReaction","withTiming","animatedProps","useAnimatedProps","d","pathInterpolator","interpolatePath"],"mappings":"AAAA,SAAA,gBAAA,EAAA,mBAAA,EAAA,cAAA,EAAA,UAAA,QAAA,yBAAA;AAOA,SAAA,WAAA;AACA,SAAA,eAAA;AAEA,eAAe,SAAA,eAAA,OAMZ;AAAA,0BALDA,OAKC;AAAA,MALDA,OAKC,6BANqC,IAMrC;AAAA,MAJDC,IAIC,QAJDA,IAIC;AACD,MAAMC,UAAU,GAAGC,cAAc,CAAjC,CAAiC,CAAjC;AAEA,MAAMC,YAAY,GAAGC,WAAW,CAAhC,IAAgC,CAAhC;AAEAC,EAAAA,mBAAmB;AAAA,2BACX;AACJ,aAAA,IAAA;AAFe,KAAA;;AAAA;AAAA,YAbrB;AAaqB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,yBAIjB,CAJiB,EAIjB,QAJiB,EAIA;AACf,UAAA,QAAA,EAAc;AACZJ,QAAAA,UAAU,CAAVA,KAAAA,GAAAA,CAAAA;AACAA,QAAAA,UAAU,CAAVA,KAAAA,GAAmBK,UAAU,CAA7BL,CAA6B,CAA7BA;AACD;AARc,KAAA;;AAAA;AAAA,kBAVnBF,UAUmB;AAAA,kBAXmB;AAWnB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,OAUjB,CAVFM,IAUE,CAViB,CAAnBA;AAaA,MAAME,aAAa,GAAGC,gBAAgB;AAAA,2BAAO;AAC3C,UAAIC,CAAC,GAAGT,IAAI,IAAZ,EAAA;;AACA,UAAIG,YAAY,IAAhB,OAAA,EAA6B;AAC3B,YAAMO,gBAAgB,GAAGC,eAAe,CAAA,YAAA,EAAA,IAAA,EAAxC,IAAwC,CAAxC;AACAF,QAAAA,CAAC,GAAGC,gBAAgB,CAACT,UAAU,CAA/BQ,KAAoB,CAApBA;AACD;;AACD,aAAO;AACLA,QAAAA,CAAAA,EAAAA;AADK,OAAP;AANF,KAAsC;;AAAA;AAAA,YAtBtCT,IAsBsC;AAAA,oBAtBtCA,YAsBsC;AAAA,eAxBA,OAwBA;AAAA,uBAtBtCA,eAsBsC;AAAA,kBAlBrC;AAkBqC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAtC;AAWA,SAAO;AAAEO,IAAAA,aAAAA,EAAAA;AAAF,GAAP;AACD","sourcesContent":["import {\n  useAnimatedProps,\n  useAnimatedReaction,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\n\nimport { usePrevious } from '../../utils';\nimport { interpolatePath } from './utils';\n\nexport default function useAnimatedPath({\n  enabled = true,\n  path,\n}: {\n  enabled?: boolean;\n  path: string;\n}) {\n  const transition = useSharedValue(0);\n\n  const previousPath = usePrevious(path);\n\n  useAnimatedReaction(\n    () => {\n      return path;\n    },\n    (_, previous) => {\n      if (previous) {\n        transition.value = 0;\n        transition.value = withTiming(1);\n      }\n    },\n    [path]\n  );\n\n  const animatedProps = useAnimatedProps(() => {\n    let d = path || '';\n    if (previousPath && enabled) {\n      const pathInterpolator = interpolatePath(previousPath, path, null);\n      d = pathInterpolator(transition.value);\n    }\n    return {\n      d,\n    };\n  });\n\n  return { animatedProps };\n}\n"]},"metadata":{},"sourceType":"module"}