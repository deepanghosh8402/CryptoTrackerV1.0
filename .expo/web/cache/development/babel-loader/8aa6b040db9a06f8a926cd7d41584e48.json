{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { getDomain } from \"./utils\";\nexport var CandlestickChartContext = React.createContext({\n  currentX: {\n    value: -1\n  },\n  currentY: {\n    value: -1\n  },\n  data: [],\n  height: 0,\n  width: 0,\n  domain: [0, 0],\n  step: 0,\n  setWidth: function setWidth() {\n    return undefined;\n  },\n  setHeight: function setHeight() {\n    return undefined;\n  }\n});\nexport function CandlestickChartProvider(_ref) {\n  var children = _ref.children,\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? [] : _ref$data;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      width = _React$useState2[0],\n      setWidth = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      height = _React$useState4[0],\n      setHeight = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      step = _React$useState6[0],\n      setStep = _React$useState6[1];\n\n  var currentX = useSharedValue(-1);\n  var currentY = useSharedValue(-1);\n  var domain = React.useMemo(function () {\n    return getDomain(data);\n  }, [data]);\n  React.useEffect(function () {\n    if (data.length) {\n      var newStep = width / data.length;\n      setStep(newStep);\n    }\n  }, [data.length, width]);\n  var contextValue = React.useMemo(function () {\n    return {\n      currentX: currentX,\n      currentY: currentY,\n      data: data,\n      width: width,\n      height: height,\n      domain: domain,\n      step: step,\n      setWidth: setWidth,\n      setHeight: setHeight,\n      setStep: setStep\n    };\n  }, [currentX, currentY, data, domain, height, step, width]);\n  return React.createElement(CandlestickChartContext.Provider, {\n    value: contextValue\n  }, children);\n}","map":{"version":3,"sources":["Context.tsx"],"names":["CandlestickChartContext","currentX","value","currentY","data","height","width","domain","step","setWidth","setHeight","undefined","React","useSharedValue","getDomain","newStep","setStep","contextValue"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,yBAAA;AAGA,SAAA,SAAA;AAEA,OAAO,IAAMA,uBAAuB,GAAG,KAAK,CAAL,aAAA,CAA8B;AACnEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,KAAK,EAAE,CAAC;AAAV,GADyD;AAEnEC,EAAAA,QAAQ,EAAE;AAAED,IAAAA,KAAK,EAAE,CAAC;AAAV,GAFyD;AAGnEE,EAAAA,IAAI,EAH+D,EAAA;AAInEC,EAAAA,MAAM,EAJ6D,CAAA;AAKnEC,EAAAA,KAAK,EAL8D,CAAA;AAMnEC,EAAAA,MAAM,EAAE,CAAA,CAAA,EAN2D,CAM3D,CAN2D;AAOnEC,EAAAA,IAAI,EAP+D,CAAA;AAQnEC,EAAAA,QAAQ,EAAE;AAAA,WARyD,SAQzD;AAAA,GARyD;AASnEC,EAAAA,SAAS,EAAE;AAAA,WAAMC,SAAN;AAAA;AATwD,CAA9B,CAAhC;AAmBP,OAAO,SAAA,wBAAA,OAG2B;AAAA,MAHO,QAGP,QAHO,QAGP;AAAA,uBADhCP,IACgC;AAAA,MADhCA,IACgC,0BADzB,EACyB;;AAChC,wBAA0BQ,KAAK,CAALA,QAAAA,CAA1B,CAA0BA,CAA1B;AAAA;AAAA,MAAM,KAAN;AAAA,MAAM,QAAN;;AACA,yBAA4BA,KAAK,CAALA,QAAAA,CAA5B,CAA4BA,CAA5B;AAAA;AAAA,MAAM,MAAN;AAAA,MAAM,SAAN;;AACA,yBAAwBA,KAAK,CAALA,QAAAA,CAAxB,CAAwBA,CAAxB;AAAA;AAAA,MAAM,IAAN;AAAA,MAAM,OAAN;;AACA,MAAMX,QAAQ,GAAGY,cAAc,CAAC,CAAhC,CAA+B,CAA/B;AACA,MAAMV,QAAQ,GAAGU,cAAc,CAAC,CAAhC,CAA+B,CAA/B;AAEA,MAAMN,MAAM,GAAGK,KAAK,CAALA,OAAAA,CAAc;AAAA,WAAME,SAAS,CAA7BF,IAA6B,CAAf;AAAA,GAAdA,EAAqC,CAApD,IAAoD,CAArCA,CAAf;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAIR,IAAI,CAAR,MAAA,EAAiB;AACf,UAAMW,OAAO,GAAGT,KAAK,GAAGF,IAAI,CAA5B,MAAA;AACAY,MAAAA,OAAO,CAAPA,OAAO,CAAPA;AACD;AAJHJ,GAAAA,EAKG,CAACR,IAAI,CAAL,MAAA,EALHQ,KAKG,CALHA;AAOA,MAAMK,YAAY,GAAG,KAAK,CAAL,OAAA,CACnB;AAAA,WAAO;AACLhB,MAAAA,QADK,EACLA,QADK;AAELE,MAAAA,QAFK,EAELA,QAFK;AAGLC,MAAAA,IAHK,EAGLA,IAHK;AAILE,MAAAA,KAJK,EAILA,KAJK;AAKLD,MAAAA,MALK,EAKLA,MALK;AAMLE,MAAAA,MANK,EAMLA,MANK;AAOLC,MAAAA,IAPK,EAOLA,IAPK;AAQLC,MAAAA,QARK,EAQLA,QARK;AASLC,MAAAA,SATK,EASLA,SATK;AAULM,MAAAA,OAAAA,EAAAA;AAVK,KAAP;AAAA,GADmB,EAanB,CAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAbF,KAaE,CAbmB,CAArB;AAgBA,SACE,KAAA,CAAA,aAAA,CAAC,uBAAD,CAAA,QAAA,EAAA;AAAkC,IAAA,KAAK,EAAEC;AAAzC,GAAA,EADF,QACE,CADF;AAKD","sourcesContent":["import * as React from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\n\nimport type { TContext, TData } from './types';\nimport { getDomain } from './utils';\n\nexport const CandlestickChartContext = React.createContext<TContext>({\n  currentX: { value: -1 },\n  currentY: { value: -1 },\n  data: [],\n  height: 0,\n  width: 0,\n  domain: [0, 0],\n  step: 0,\n  setWidth: () => undefined,\n  setHeight: () => undefined,\n});\n\ntype CandlestickChartProviderProps = {\n  children: React.ReactNode;\n  data: TData;\n  width?: number;\n  height?: number;\n};\n\nexport function CandlestickChartProvider({\n  children,\n  data = [],\n}: CandlestickChartProviderProps) {\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const [step, setStep] = React.useState(0);\n  const currentX = useSharedValue(-1);\n  const currentY = useSharedValue(-1);\n\n  const domain = React.useMemo(() => getDomain(data), [data]);\n\n  React.useEffect(() => {\n    if (data.length) {\n      const newStep = width / data.length;\n      setStep(newStep);\n    }\n  }, [data.length, width]);\n\n  const contextValue = React.useMemo(\n    () => ({\n      currentX,\n      currentY,\n      data,\n      width,\n      height,\n      domain,\n      step,\n      setWidth,\n      setHeight,\n      setStep,\n    }),\n    [currentX, currentY, data, domain, height, step, width]\n  );\n\n  return (\n    <CandlestickChartContext.Provider value={contextValue}>\n      {children}\n    </CandlestickChartContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}