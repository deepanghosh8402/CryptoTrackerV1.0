{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"inactiveColor\", \"width\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Path } from 'react-native-svg';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport { LineChartPathContext } from \"./ChartPath\";\nimport useAnimatedPath from \"./useAnimatedPath\";\nvar AnimatedPath = Animated.createAnimatedComponent(Path);\nLineChartPath.displayName = 'LineChartPath';\nexport function LineChartPath(_ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'black' : _ref$color,\n      inactiveColor = _ref.inactiveColor,\n      _ref$width = _ref.width,\n      strokeWidth = _ref$width === void 0 ? 3 : _ref$width,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n      path = _React$useContext.path;\n\n  var _React$useContext2 = React.useContext(LineChartPathContext),\n      isTransitionEnabled = _React$useContext2.isTransitionEnabled,\n      isInactive = _React$useContext2.isInactive;\n\n  var _useAnimatedPath = useAnimatedPath({\n    enabled: isTransitionEnabled,\n    path: path\n  }),\n      animatedProps = _useAnimatedPath.animatedProps;\n\n  return React.createElement(React.Fragment, null, React.createElement(AnimatedPath, _extends({\n    animatedProps: animatedProps,\n    fill: \"transparent\",\n    stroke: isInactive ? inactiveColor || color : color,\n    strokeOpacity: isInactive && !inactiveColor ? 0.2 : 1,\n    strokeWidth: strokeWidth\n  }, props)));\n}","map":{"version":3,"sources":["Path.tsx"],"names":["AnimatedPath","Animated","LineChartPath","color","width","strokeWidth","props","path","React","isInactive","animatedProps","useAnimatedPath","enabled","inactiveColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,QAAA,MAAA,yBAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AAEA,SAAA,0BAAA;AACA,SAAA,oBAAA;AACA,OAAA,eAAA;AAEA,IAAMA,YAAY,GAAGC,QAAQ,CAARA,uBAAAA,CAArB,IAAqBA,CAArB;AAyBAC,aAAa,CAAbA,WAAAA,GAAAA,eAAAA;AAEA,OAAO,SAAA,aAAA,OAKgB;AAAA,wBAJrBC,KAIqB;AAAA,MAJrBA,KAIqB,2BALO,OAKP;AAAA,MALO,aAKP,QALO,aAKP;AAAA,wBAFrBC,KAEqB;AAAA,MAFdC,WAEc,2BALO,CAKP;AAAA,MADlBC,KACkB;;AACrB,0BAAiBE,KAAK,CAALA,UAAAA,CAAjB,0BAAiBA,CAAjB;AAAA,MAAQD,IAAR,qBAAQA,IAAR;;AACA,2BACEC,KAAK,CAALA,UAAAA,CAHmB,oBAGnBA,CADF;AAAA,MAAM,mBAAN,sBAAM,mBAAN;AAAA,MAA6BC,UAA7B,sBAA6BA,UAA7B;;AAKA,yBAA0BE,eAAe,CAAC;AACxCC,IAAAA,OAAO,EADiC,mBAAA;AAExCL,IAAAA,IAAAA,EAAAA;AAFwC,GAAD,CAAzC;AAAA,MAAQG,aAAR,oBAAQA,aAAR;;AAOA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA;AACE,IAAA,aAAa,EADf,aAAA;AAEE,IAAA,IAAI,EAFN,aAAA;AAGE,IAAA,MAAM,EAAED,UAAU,GAAGI,aAAa,IAAhB,KAAA,GAHpB,KAAA;AAIE,IAAA,aAAa,EAAEJ,UAAU,IAAI,CAAdA,aAAAA,GAAAA,GAAAA,GAJjB,CAAA;AAKE,IAAA,WAAW,EAAEJ;AALf,GAAA,EAFJ,KAEI,CAAA,CADF,CADF;AAYD","sourcesContent":["import * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Path, PathProps } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPathContext } from './ChartPath';\nimport useAnimatedPath from './useAnimatedPath';\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\n\nexport type LineChartPathProps = Animated.AnimateProps<PathProps> & {\n  color?: string;\n  inactiveColor?: string;\n  width?: number;\n  isInactive?: boolean;\n  /**\n   * Default: `true`.\n   *\n   * If `false`, changes in the chart's path will not animate.\n   *\n   * While this use case is rare, it may be useful on web, where animations might not work as well.\n   *\n   * **Example**\n   *\n   * ```tsx\n   * <LineChart.Path\n   *   pathProps={{ isTransitionEnabled: Platform.OS !== 'web' }}\n   * />\n   * ```\n   */\n  isTransitionEnabled?: boolean;\n};\n\nLineChartPath.displayName = 'LineChartPath';\n\nexport function LineChartPath({\n  color = 'black',\n  inactiveColor,\n  width: strokeWidth = 3,\n  ...props\n}: LineChartPathProps) {\n  const { path } = React.useContext(LineChartDimensionsContext);\n  const { isTransitionEnabled, isInactive } =\n    React.useContext(LineChartPathContext);\n\n  ////////////////////////////////////////////////\n\n  const { animatedProps } = useAnimatedPath({\n    enabled: isTransitionEnabled,\n    path,\n  });\n\n  ////////////////////////////////////////////////\n\n  return (\n    <>\n      <AnimatedPath\n        animatedProps={animatedProps}\n        fill=\"transparent\"\n        stroke={isInactive ? inactiveColor || color : color}\n        strokeOpacity={isInactive && !inactiveColor ? 0.2 : 1}\n        strokeWidth={strokeWidth}\n        {...props}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}