{"ast":null,"code":"import { useDerivedValue } from 'react-native-reanimated';\nimport { useCandlestickChart } from \"./useCandlestickChart\";\nexport function useCandleData() {\n  var _useCandlestickChart = useCandlestickChart(),\n      currentX = _useCandlestickChart.currentX,\n      data = _useCandlestickChart.data,\n      step = _useCandlestickChart.step;\n\n  var candle = useDerivedValue(function () {\n    var _f = function _f() {\n      if (currentX.value === -1) {\n        return {\n          timestamp: -1,\n          low: -1,\n          open: -1,\n          high: -1,\n          close: -1\n        };\n      }\n\n      return data[Math.floor(currentX.value / step)];\n    };\n\n    _f._closure = {\n      currentX: currentX,\n      data: data,\n      step: step\n    };\n    _f.asString = \"function _f(){const{currentX,data,step}=jsThis._closure;{if(currentX.value===-1){return{timestamp:-1,low:-1,open:-1,high:-1,close:-1};}return data[Math.floor(currentX.value/step)];}}\";\n    _f.__workletHash = 10565625934119;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\candle\\\\useCandleData.js (9:33)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return candle;\n}","map":{"version":3,"sources":["useCandleData.ts"],"names":["step","useCandlestickChart","candle","useDerivedValue","currentX","timestamp","low","open","high","close","data","Math"],"mappings":"AAAA,SAAA,eAAA,QAAA,yBAAA;AAGA,SAAA,mBAAA;AAEA,OAAO,SAAA,aAAA,GAAkE;AACvE,6BAAiCC,mBAAjC,EAAA;AAAA,MAAM,QAAN,wBAAM,QAAN;AAAA,MAAM,IAAN,wBAAM,IAAN;AAAA,MAAwBD,IAAxB,wBAAwBA,IAAxB;;AAEA,MAAME,MAAM,GAAGC,eAAe;AAAA,2BAAO;AACnC,UAAIC,QAAQ,CAARA,KAAAA,KAAmB,CAAvB,CAAA,EAA2B;AACzB,eAAO;AAAEC,UAAAA,SAAS,EAAE,CAAb,CAAA;AAAiBC,UAAAA,GAAG,EAAE,CAAtB,CAAA;AAA0BC,UAAAA,IAAI,EAAE,CAAhC,CAAA;AAAoCC,UAAAA,IAAI,EAAE,CAA1C,CAAA;AAA8CC,UAAAA,KAAK,EAAE,CAAC;AAAtD,SAAP;AACD;;AACD,aAAOC,IAAI,CAACC,IAAI,CAAJA,KAAAA,CAAWP,QAAQ,CAARA,KAAAA,GAAvB,IAAYO,CAAD,CAAX;AAJF,KAA8B;;AAAA;AAAA,gBAEnB,QAFmB;AAAA,YAEFL,IAFE;AAAA,YAEnB;AAFmB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAA9B;AAOA,SAAA,MAAA;AACD","sourcesContent":["import Animated, { useDerivedValue } from 'react-native-reanimated';\nimport type { TCandle } from './types';\n\nimport { useCandlestickChart } from './useCandlestickChart';\n\nexport function useCandleData(): Readonly<Animated.SharedValue<TCandle>> {\n  const { currentX, data, step } = useCandlestickChart();\n\n  const candle = useDerivedValue(() => {\n    if (currentX.value === -1) {\n      return { timestamp: -1, low: -1, open: -1, high: -1, close: -1 };\n    }\n    return data[Math.floor(currentX.value / step)];\n  });\n\n  return candle;\n}\n"]},"metadata":{},"sourceType":"module"}