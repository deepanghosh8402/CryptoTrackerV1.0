{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { useDerivedValue } from 'react-native-reanimated';\nimport { formatPrice } from \"../../utils\";\nimport { useCandlestickChart } from \"./useCandlestickChart\";\nimport { getPrice } from \"./utils\";\nimport { useCandleData } from \"./useCandleData\";\nexport function useCandlestickChartPrice() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      format = _ref.format,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 2 : _ref$precision,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'crosshair' : _ref$type;\n\n  var _useCandlestickChart = useCandlestickChart(),\n      currentY = _useCandlestickChart.currentY,\n      domain = _useCandlestickChart.domain,\n      height = _useCandlestickChart.height;\n\n  var candle = useCandleData();\n  var float = useDerivedValue(function () {\n    var _f = function _f() {\n      var price = 0;\n\n      if (type === 'crosshair') {\n        price = getPrice({\n          y: currentY.value,\n          domain: [Math.min.apply(Math, _toConsumableArray(domain)), Math.max.apply(Math, _toConsumableArray(domain))],\n          maxHeight: height\n        });\n      } else {\n        price = candle.value[type];\n      }\n\n      if (price === -1) return '';\n      return price.toFixed(precision).toString();\n    };\n\n    _f._closure = {\n      type: type,\n      getPrice: getPrice,\n      currentY: currentY,\n      domain: domain,\n      height: height,\n      candle: candle,\n      precision: precision\n    };\n    _f.asString = \"function _f(){const{type,getPrice,currentY,domain,height,candle,precision}=jsThis._closure;{let price=0;if(type==='crosshair'){price=getPrice({y:currentY.value,domain:[Math.min(...domain),Math.max(...domain)],maxHeight:height});}else{price=candle.value[type];}if(price===-1)return'';return price.toFixed(precision).toString();}}\";\n    _f.__workletHash = 16496336181800;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\candle\\\\usePrice.js (17:32)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var formatted = useDerivedValue(function () {\n    var _f = function _f() {\n      if (!float.value) return '';\n      var formattedPrice = formatPrice({\n        value: float.value\n      });\n      return format ? format({\n        value: float.value,\n        formatted: formattedPrice\n      }) : formattedPrice;\n    };\n\n    _f._closure = {\n      float: float,\n      formatPrice: formatPrice,\n      format: format\n    };\n    _f.asString = \"function _f(){const{float,formatPrice,format}=jsThis._closure;{if(!float.value)return'';const formattedPrice=formatPrice({value:float.value});return format?format({value:float.value,formatted:formattedPrice}):formattedPrice;}}\";\n    _f.__workletHash = 5725475058547;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\candle\\\\usePrice.js (33:36)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return {\n    value: float,\n    formatted: formatted\n  };\n}","map":{"version":3,"sources":["usePrice.ts"],"names":["precision","type","currentY","height","useCandlestickChart","candle","useCandleData","float","useDerivedValue","price","getPrice","y","domain","Math","maxHeight","formatted","formattedPrice","formatPrice","value","format"],"mappings":";AAAA,SAAA,eAAA,QAAA,yBAAA;AAEA,SAAA,WAAA;AACA,SAAA,mBAAA;AACA,SAAA,QAAA;AAEA,SAAA,aAAA;AAEA,OAAO,SAAA,wBAAA,GAWL;AAAA,iFAXK,EAWL;AAAA,MAXuC,MAWvC,QAXuC,MAWvC;AAAA,4BATAA,SASA;AAAA,MATAA,SASA,+BAXuC,CAWvC;AAAA,uBARAC,IAQA;AAAA,MARAA,IAQA,0BARO,WAQP;;AACA,6BAAqCG,mBAArC,EAAA;AAAA,MAAQF,QAAR,wBAAQA,QAAR;AAAA,MAAM,MAAN,wBAAM,MAAN;AAAA,MAA0BC,MAA1B,wBAA0BA,MAA1B;;AACA,MAAME,MAAM,GAAGC,aAAf,EAAA;AAEA,MAAMC,KAAK,GAAGC,eAAe;AAAA,2BAAO;AAClC,UAAIC,KAAK,GAAT,CAAA;;AACA,UAAIR,IAAI,KAAR,WAAA,EAA0B;AACxBQ,QAAAA,KAAK,GAAGC,QAAQ,CAAC;AACfC,UAAAA,CAAC,EAAET,QAAQ,CADI,KAAA;AAEfU,UAAAA,MAAM,EAAE,CAACC,IAAI,CAAJA,GAAAA,OAAAA,IAAI,qBAAL,MAAK,EAAL,EAAsBA,IAAI,CAAJA,GAAAA,OAAAA,IAAI,qBAFnB,MAEmB,EAA1B,CAFO;AAGfC,UAAAA,SAAS,EAAEX;AAHI,SAAD,CAAhBM;AADF,OAAA,MAMO;AACLA,QAAAA,KAAK,GAAGJ,MAAM,CAANA,KAAAA,CAARI,IAAQJ,CAARI;AACD;;AACD,UAAIA,KAAK,KAAK,CAAd,CAAA,EAAkB,OAAA,EAAA;AAClB,aAAOA,KAAK,CAALA,OAAAA,CAAAA,SAAAA,EAAP,QAAOA,EAAP;AAZF,KAA6B;;AAAA;AAAA,YAHvB,IAGuB;AAAA,gBAfxB,QAewB;AAAA,gBAfU,QAeV;AAAA,cAfU,MAeV;AAAA,cAZtB,MAYsB;AAAA,cAHvB,MAGuB;AAAA,iBAFdH;AAEc;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAA7B;AAcA,MAAMS,SAAS,GAAGP,eAAe;AAAA,2BAAO;AACtC,UAAI,CAACD,KAAK,CAAV,KAAA,EAAkB,OAAA,EAAA;AAClB,UAAMS,cAAc,GAAGC,WAAW,CAAC;AAAEC,QAAAA,KAAK,EAAEX,KAAK,CAACW;AAAf,OAAD,CAAlC;AACA,aAAOC,MAAM,GACTA,MAAM,CAAC;AAAED,QAAAA,KAAK,EAAEX,KAAK,CAAd,KAAA;AAAsBQ,QAAAA,SAAS,EAAEC;AAAjC,OAAD,CADG,GAAb,cAAA;AAHF,KAAiC;;AAAA;AAAA,aA3BxB,KA2BwB;AAAA,mBAjCnC,WAiCmC;AAAA,cA7BM;AA6BN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAjC;AAQA,SAAO;AAAEE,IAAAA,KAAK,EAAP,KAAA;AAAgBH,IAAAA,SAAAA,EAAAA;AAAhB,GAAP;AACD","sourcesContent":["import Animated, { useDerivedValue } from 'react-native-reanimated';\n\nimport { formatPrice } from '../../utils';\nimport { useCandlestickChart } from './useCandlestickChart';\nimport { getPrice } from './utils';\nimport type { TFormatterFn, TPriceType } from './types';\nimport { useCandleData } from './useCandleData';\n\nexport function useCandlestickChartPrice({\n  format,\n  precision = 2,\n  type = 'crosshair',\n}: {\n  format?: TFormatterFn<string>;\n  precision?: number;\n  type?: TPriceType;\n} = {}): {\n  value: Readonly<Animated.SharedValue<string>>;\n  formatted: Readonly<Animated.SharedValue<string>>;\n} {\n  const { currentY, domain, height } = useCandlestickChart();\n  const candle = useCandleData();\n\n  const float = useDerivedValue(() => {\n    let price = 0;\n    if (type === 'crosshair') {\n      price = getPrice({\n        y: currentY.value,\n        domain: [Math.min(...domain), Math.max(...domain)],\n        maxHeight: height,\n      });\n    } else {\n      price = candle.value[type];\n    }\n    if (price === -1) return '';\n    return price.toFixed(precision).toString();\n  });\n  const formatted = useDerivedValue(() => {\n    if (!float.value) return '';\n    const formattedPrice = formatPrice({ value: float.value });\n    return format\n      ? format({ value: float.value, formatted: formattedPrice })\n      : formattedPrice;\n  });\n\n  return { value: float, formatted };\n}\n"]},"metadata":{},"sourceType":"module"}