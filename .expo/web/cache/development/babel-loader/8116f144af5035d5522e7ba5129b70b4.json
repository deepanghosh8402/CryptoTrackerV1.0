{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Defs, LinearGradient, Stop, Path } from 'react-native-svg';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport { LineChartPathContext } from \"./ChartPath\";\nimport useAnimatedPath from \"./useAnimatedPath\";\nvar AnimatedPath = Animated.createAnimatedComponent(Path);\nvar id = 0;\nLineChartGradient.displayName = 'LineChartGradient';\nexport function LineChartGradient(_ref) {\n  var _ref$color = _ref.color,\n      overrideColor = _ref$color === void 0 ? undefined : _ref$color,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n      area = _React$useContext.area;\n\n  var _React$useContext2 = React.useContext(LineChartPathContext),\n      contextColor = _React$useContext2.color,\n      isTransitionEnabled = _React$useContext2.isTransitionEnabled;\n\n  var color = overrideColor || contextColor;\n\n  var _useAnimatedPath = useAnimatedPath({\n    enabled: isTransitionEnabled,\n    path: area\n  }),\n      animatedProps = _useAnimatedPath.animatedProps;\n\n  var localId = React.useRef(++id);\n  return React.createElement(React.Fragment, null, children ? React.createElement(Defs, null, React.createElement(LinearGradient, {\n    id: \"\" + localId.current,\n    x1: \"0\",\n    x2: \"0\",\n    y1: \"0\",\n    y2: \"100%\"\n  }, children)) : React.createElement(Defs, null, React.createElement(LinearGradient, {\n    id: \"\" + localId.current,\n    x1: \"0\",\n    x2: \"0\",\n    y1: \"0\",\n    y2: \"100%\"\n  }, React.createElement(Stop, {\n    offset: \"20%\",\n    stopColor: color,\n    stopOpacity: 0.15\n  }), React.createElement(Stop, {\n    offset: \"40%\",\n    stopColor: color,\n    stopOpacity: 0.05\n  }), React.createElement(Stop, {\n    offset: \"100%\",\n    stopColor: color,\n    stopOpacity: 0\n  }))), React.createElement(AnimatedPath, _extends({\n    animatedProps: animatedProps,\n    fill: \"url(#\" + localId.current + \")\"\n  }, props)));\n}","map":{"version":3,"sources":["Gradient.tsx"],"names":["AnimatedPath","Animated","id","LineChartGradient","color","overrideColor","props","area","React","isTransitionEnabled","animatedProps","useAnimatedPath","enabled","path","localId","children","current"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,QAAA,MAAA,yBAAA;AACA,SAAA,IAAA,EAAA,cAAA,EAAA,IAAA,EAAA,IAAA,QAAA,kBAAA;AAEA,SAAA,0BAAA;AACA,SAAA,oBAAA;AACA,OAAA,eAAA;AAEA,IAAMA,YAAY,GAAGC,QAAQ,CAARA,uBAAAA,CAArB,IAAqBA,CAArB;AAOA,IAAIC,EAAE,GAAN,CAAA;AAEAC,iBAAiB,CAAjBA,WAAAA,GAAAA,mBAAAA;AAEA,OAAO,SAAA,iBAAA,OAIoB;AAAA,wBAHzBC,KAGyB;AAAA,MAHlBC,aAGkB,2BAJO,SAIP;AAAA,MAJO,QAIP,QAJO,QAIP;AAAA,MADtBC,KACsB;;AACzB,0BAAiBE,KAAK,CAALA,UAAAA,CAAjB,0BAAiBA,CAAjB;AAAA,MAAQD,IAAR,qBAAQA,IAAR;;AACA,2BACEC,KAAK,CAALA,UAAAA,CADF,oBACEA,CADF;AAAA,MAAM,YAAN,sBAAQJ,KAAR;AAAA,MAA6BK,mBAA7B,sBAA6BA,mBAA7B;;AAGA,MAAML,KAAK,GAAGC,aAAa,IALF,YAKzB;;AAIA,yBAA0BM,eAAe,CAAC;AACxCC,IAAAA,OAAO,EADiC,mBAAA;AAExCC,IAAAA,IAAI,EAAEN;AAFkC,GAAD,CAAzC;AAAA,MAAQG,aAAR,oBAAQA,aAAR;;AAOA,MAAMI,OAAO,GAAGN,KAAK,CAALA,MAAAA,CAAa,EAhBJ,EAgBTA,CAAhB;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACGO,QAAQ,GACP,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AACE,IAAA,EAAE,OAAKD,OAAO,CADhB,OAAA;AAEE,IAAA,EAAE,EAFJ,GAAA;AAGE,IAAA,EAAE,EAHJ,GAAA;AAIE,IAAA,EAAE,EAJJ,GAAA;AAKE,IAAA,EAAE,EAAC;AALL,GAAA,EAFK,QAEL,CADF,CADO,GAaP,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AACE,IAAA,EAAE,OAAKA,OAAO,CADhB,OAAA;AAEE,IAAA,EAAE,EAFJ,GAAA;AAGE,IAAA,EAAE,EAHJ,GAAA;AAIE,IAAA,EAAE,EAJJ,GAAA;AAKE,IAAA,EAAE,EAAC;AALL,GAAA,EAOE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,MAAM,EAAZ,KAAA;AAAmB,IAAA,SAAS,EAA5B,KAAA;AAAqC,IAAA,WAAW,EAAE;AAAlD,GAAA,CAPF,EAQE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,MAAM,EAAZ,KAAA;AAAmB,IAAA,SAAS,EAA5B,KAAA;AAAqC,IAAA,WAAW,EAAE;AAAlD,GAAA,CARF,EASE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,MAAM,EAAZ,MAAA;AAAoB,IAAA,SAAS,EAA7B,KAAA;AAAsC,IAAA,WAAW,EAAE;AAAnD,GAAA,CATF,CADF,CAdJ,EA4BE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA;AACE,IAAA,aAAa,EADf,aAAA;AAEE,IAAA,IAAI,YAAUA,OAAO,CAACE,OAAlB;AAFN,GAAA,EA7BJ,KA6BI,CAAA,CA5BF,CADF;AAoCD","sourcesContent":["import * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Defs, LinearGradient, Stop, Path, PathProps } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPathContext } from './ChartPath';\nimport useAnimatedPath from './useAnimatedPath';\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\n\nexport type LineChartGradientProps = Animated.AnimateProps<PathProps> & {\n  color?: string;\n  children?: React.ReactNode;\n};\n\nlet id = 0;\n\nLineChartGradient.displayName = 'LineChartGradient';\n\nexport function LineChartGradient({\n  color: overrideColor = undefined,\n  children,\n  ...props\n}: LineChartGradientProps) {\n  const { area } = React.useContext(LineChartDimensionsContext);\n  const { color: contextColor, isTransitionEnabled } =\n    React.useContext(LineChartPathContext);\n\n  const color = overrideColor || contextColor;\n\n  ////////////////////////////////////////////////\n\n  const { animatedProps } = useAnimatedPath({\n    enabled: isTransitionEnabled,\n    path: area,\n  });\n\n  ////////////////////////////////////////////////\n\n  const localId = React.useRef(++id);\n\n  ////////////////////////////////////////////////\n\n  return (\n    <>\n      {children ? (\n        <Defs>\n          <LinearGradient\n            id={`${localId.current}`}\n            x1=\"0\"\n            x2=\"0\"\n            y1=\"0\"\n            y2=\"100%\"\n          >\n            {children}\n          </LinearGradient>\n        </Defs>\n      ) : (\n        <Defs>\n          <LinearGradient\n            id={`${localId.current}`}\n            x1=\"0\"\n            x2=\"0\"\n            y1=\"0\"\n            y2=\"100%\"\n          >\n            <Stop offset=\"20%\" stopColor={color} stopOpacity={0.15} />\n            <Stop offset=\"40%\" stopColor={color} stopOpacity={0.05} />\n            <Stop offset=\"100%\" stopColor={color} stopOpacity={0} />\n          </LinearGradient>\n        </Defs>\n      )}\n      <AnimatedPath\n        animatedProps={animatedProps}\n        fill={`url(#${localId.current})`}\n        {...props}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}