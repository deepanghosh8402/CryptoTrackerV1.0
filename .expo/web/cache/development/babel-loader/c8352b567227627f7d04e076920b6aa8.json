{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated, { Easing, useAnimatedProps, useDerivedValue, withRepeat, withSequence, withTiming } from 'react-native-reanimated';\nimport { Circle } from 'react-native-svg';\nimport { getYForX, parse } from 'react-native-redash';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport { LineChartPathContext } from \"./ChartPath\";\nimport { useLineChart } from \"./useLineChart\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\nLineChartDot.displayName = 'LineChartDot';\nexport function LineChartDot(_ref) {\n  var at = _ref.at,\n      _ref$color = _ref.color,\n      defaultColor = _ref$color === void 0 ? 'black' : _ref$color,\n      dotProps = _ref.dotProps,\n      _ref$hasOuterDot = _ref.hasOuterDot,\n      defaultHasOuterDot = _ref$hasOuterDot === void 0 ? false : _ref$hasOuterDot,\n      _ref$hasPulse = _ref.hasPulse,\n      hasPulse = _ref$hasPulse === void 0 ? false : _ref$hasPulse,\n      inactiveColor = _ref.inactiveColor,\n      outerDotProps = _ref.outerDotProps,\n      _ref$pulseBehaviour = _ref.pulseBehaviour,\n      pulseBehaviour = _ref$pulseBehaviour === void 0 ? 'while-inactive' : _ref$pulseBehaviour,\n      _ref$pulseDurationMs = _ref.pulseDurationMs,\n      pulseDurationMs = _ref$pulseDurationMs === void 0 ? 800 : _ref$pulseDurationMs,\n      _ref$showInactiveColo = _ref.showInactiveColor,\n      showInactiveColor = _ref$showInactiveColo === void 0 ? true : _ref$showInactiveColo,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 4 : _ref$size,\n      _ref$outerSize = _ref.outerSize,\n      outerSize = _ref$outerSize === void 0 ? size * 4 : _ref$outerSize;\n\n  var _useLineChart = useLineChart(),\n      data = _useLineChart.data,\n      isActive = _useLineChart.isActive;\n\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n      path = _React$useContext.path,\n      width = _React$useContext.pathWidth;\n\n  var _React$useContext2 = React.useContext(LineChartPathContext),\n      _isInactive = _React$useContext2.isInactive;\n\n  var isInactive = showInactiveColor && _isInactive;\n  var color = isInactive ? inactiveColor || defaultColor : defaultColor;\n  var opacity = isInactive && !inactiveColor ? 0.5 : 1;\n  var hasOuterDot = defaultHasOuterDot || hasPulse;\n  var parsedPath = React.useMemo(function () {\n    return parse(path);\n  }, [path]);\n  var pointWidth = React.useMemo(function () {\n    return width / (data.length - 1);\n  }, [data.length, width]);\n  var x = useDerivedValue(function () {\n    var _f = function _f() {\n      return withTiming(pointWidth * at);\n    };\n\n    _f._closure = {\n      withTiming: withTiming,\n      pointWidth: pointWidth,\n      at: at\n    };\n    _f.asString = \"function _f(){const{withTiming,pointWidth,at}=jsThis._closure;{return withTiming(pointWidth*at);}}\";\n    _f.__workletHash = 17578783601757;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\Dot.js (47:28)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var y = useDerivedValue(function () {\n    var _f = function _f() {\n      return withTiming(getYForX(parsedPath, x.value) || 0);\n    };\n\n    _f._closure = {\n      withTiming: withTiming,\n      getYForX: getYForX,\n      parsedPath: parsedPath,\n      x: x\n    };\n    _f.asString = \"function _f(){const{withTiming,getYForX,parsedPath,x}=jsThis._closure;{return withTiming(getYForX(parsedPath,x.value)||0);}}\";\n    _f.__workletHash = 12472676788643;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\Dot.js (48:28)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var animatedDotProps = useAnimatedProps(function () {\n    var _f = function _f() {\n      return {\n        cx: x.value,\n        cy: y.value\n      };\n    };\n\n    _f._closure = {\n      x: x,\n      y: y\n    };\n    _f.asString = \"function _f(){const{x,y}=jsThis._closure;{return{cx:x.value,cy:y.value};}}\";\n    _f.__workletHash = 2762943688369;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\Dot.js (50:44)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var animatedOuterDotProps = useAnimatedProps(function () {\n    var _f = function _f() {\n      var defaultProps = {\n        cx: x.value,\n        cy: y.value,\n        opacity: 0.1,\n        r: outerSize\n      };\n\n      if (!hasPulse) {\n        return defaultProps;\n      }\n\n      if (isActive.value && pulseBehaviour === 'while-inactive') {\n        return _objectSpread(_objectSpread({}, defaultProps), {}, {\n          r: 0\n        });\n      }\n\n      var easing = Easing.out(Easing.sin);\n      var animatedOpacity = withRepeat(withSequence(withTiming(0.8), withTiming(0, {\n        duration: pulseDurationMs,\n        easing: easing\n      })), -1, false);\n      var scale = withRepeat(withSequence(withTiming(0), withTiming(outerSize, {\n        duration: pulseDurationMs,\n        easing: easing\n      })), -1, false);\n\n      if (pulseBehaviour === 'while-inactive') {\n        return _objectSpread(_objectSpread({}, defaultProps), {}, {\n          opacity: isActive.value ? withTiming(0) : animatedOpacity,\n          r: isActive.value ? withTiming(0) : scale\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, defaultProps), {}, {\n        opacity: animatedOpacity,\n        r: scale\n      });\n    };\n\n    _f._closure = {\n      x: x,\n      y: y,\n      outerSize: outerSize,\n      hasPulse: hasPulse,\n      isActive: isActive,\n      pulseBehaviour: pulseBehaviour,\n      Easing: {\n        out: Easing.out,\n        sin: Easing.sin\n      },\n      withRepeat: withRepeat,\n      withSequence: withSequence,\n      withTiming: withTiming,\n      pulseDurationMs: pulseDurationMs\n    };\n    _f.asString = \"function _f(){const{x,y,outerSize,hasPulse,isActive,pulseBehaviour,Easing,withRepeat,withSequence,withTiming,pulseDurationMs}=jsThis._closure;{let defaultProps={cx:x.value,cy:y.value,opacity:0.1,r:outerSize};if(!hasPulse){return defaultProps;}if(isActive.value&&pulseBehaviour==='while-inactive'){return{...defaultProps,r:0};}const easing=Easing.out(Easing.sin);const animatedOpacity=withRepeat(withSequence(withTiming(0.8),withTiming(0,{duration:pulseDurationMs,easing:easing})),-1,false);const scale=withRepeat(withSequence(withTiming(0),withTiming(outerSize,{duration:pulseDurationMs,easing:easing})),-1,false);if(pulseBehaviour==='while-inactive'){return{...defaultProps,opacity:isActive.value?withTiming(0):animatedOpacity,r:isActive.value?withTiming(0):scale};}return{...defaultProps,opacity:animatedOpacity,r:scale};}}\";\n    _f.__workletHash = 15073946155097;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\Dot.js (54:49)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [outerSize]);\n  return React.createElement(React.Fragment, null, React.createElement(AnimatedCircle, _extends({\n    animatedProps: animatedDotProps,\n    r: size,\n    fill: color,\n    opacity: opacity\n  }, dotProps)), hasOuterDot && React.createElement(AnimatedCircle, _extends({\n    animatedProps: animatedOuterDotProps,\n    fill: color\n  }, outerDotProps)));\n}","map":{"version":3,"sources":["Dot.tsx"],"names":["Animated","AnimatedCircle","LineChartDot","color","defaultColor","hasOuterDot","defaultHasOuterDot","hasPulse","pulseBehaviour","pulseDurationMs","showInactiveColor","size","outerSize","isActive","useLineChart","pathWidth","width","React","LineChartDimensionsContext","isInactive","_isInactive","inactiveColor","opacity","parsedPath","parse","pointWidth","data","x","useDerivedValue","withTiming","y","getYForX","animatedDotProps","useAnimatedProps","cx","cy","value","animatedOuterDotProps","defaultProps","r","easing","Easing","animatedOpacity","withRepeat","withSequence","duration","scale"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAOA,QAAP,IAAA,MAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,UAAA,EAAA,YAAA,EAAA,UAAA,QAAA,yBAAA;AAQA,SAAA,MAAA,QAAA,kBAAA;AACA,SAAA,QAAA,EAAA,KAAA,QAAA,qBAAA;AAEA,SAAA,0BAAA;AACA,SAAA,oBAAA;AACA,SAAA,YAAA;AAEA,IAAMC,cAAc,GAAGD,QAAQ,CAARA,uBAAAA,CAAvB,MAAuBA,CAAvB;AA2BAE,YAAY,CAAZA,WAAAA,GAAAA,cAAAA;AAEA,OAAO,SAAA,YAAA,OAae;AAAA,MAbO,EAaP,QAbO,EAaP;AAAA,wBAXpBC,KAWoB;AAAA,MAXbC,YAWa,2BAbO,OAaP;AAAA,MAbO,QAaP,QAbO,QAaP;AAAA,8BATpBC,WASoB;AAAA,MATPC,kBASO,iCAbO,KAaP;AAAA,2BARpBC,QAQoB;AAAA,MARpBA,QAQoB,8BAbO,KAaP;AAAA,MAbO,aAaP,QAbO,aAaP;AAAA,MAbO,aAaP,QAbO,aAaP;AAAA,iCALpBC,cAKoB;AAAA,MALpBA,cAKoB,oCALH,gBAKG;AAAA,kCAJpBC,eAIoB;AAAA,MAJpBA,eAIoB,qCAbO,GAaP;AAAA,mCAHpBC,iBAGoB;AAAA,MAHpBA,iBAGoB,sCAbO,IAaP;AAAA,uBAFpBC,IAEoB;AAAA,MAFpBA,IAEoB,0BAbO,CAaP;AAAA,4BADpBC,SACoB;AAAA,MADpBA,SACoB,+BADRD,IAAI,GAAG,CACC;;AACpB,sBAA2BG,YAA3B,EAAA;AAAA,MAAM,IAAN,iBAAM,IAAN;AAAA,MAAcD,QAAd,iBAAcA,QAAd;;AACA,0BAAmCI,KAAK,CAALA,UAAAA,CACjCC,0BADiCD,CAAnC;AAAA,MAAM,IAAN,qBAAM,IAAN;AAAA,MAAyBD,KAAzB,qBAAcD,SAAd;;AAMA,2BAAoCE,KAAK,CAALA,UAAAA,CAApC,oBAAoCA,CAApC;AAAA,MAAoBG,WAApB,sBAAQD,UAAR;;AACA,MAAMA,UAAU,GAAGT,iBAAiB,IAApC,WAAA;AACA,MAAMP,KAAK,GAAGgB,UAAU,GAAGE,aAAa,IAAhB,YAAA,GAAxB,YAAA;AACA,MAAMC,OAAO,GAAGH,UAAU,IAAI,CAAdA,aAAAA,GAAAA,GAAAA,GAAhB,CAAA;AACA,MAAMd,WAAW,GAAGC,kBAAkB,IAZlB,QAYpB;AAIA,MAAMiB,UAAU,GAAGN,KAAK,CAALA,OAAAA,CAAc;AAAA,WAAMO,KAAK,CAAzBP,IAAyB,CAAX;AAAA,GAAdA,EAAiC,CAhBhC,IAgBgC,CAAjCA,CAAnB;AAIA,MAAMQ,UAAU,GAAGR,KAAK,CAALA,OAAAA,CACjB;AAAA,WAAMD,KAAK,IAAIU,IAAI,CAAJA,MAAAA,GADET,CACN,CAAX;AAAA,GADiBA,EAEjB,CAACS,IAAI,CAAL,MAAA,EAtBkB,KAsBlB,CAFiBT,CAAnB;AAOA,MAAMU,CAAC,GAAGC,eAAe;AAAA,aAAC;AAAA,aAAMC,UAAU,CAACJ,UAAU,GAArD,EAA0C,CAAhB;AAAA,KAAD;;AAAA;AAAA,kB,UAAA;AAAA,kB,UAAA;AAAA,U;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAzB;AACA,MAAMK,CAAC,GAAGF,eAAe;AAAA,aAAC;AAAA,aACxBC,UAAU,CAACE,QAAQ,CAAA,UAAA,EAAcJ,CAAC,CAAvBI,KAAQ,CAARA,IA7BO,CA6BR,CADc;AAAA,KAAD;;AAAA;AAAA,kB,UAAA;AAAA,gB,QAAA;AAAA,kB,UAAA;AAAA,S;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAzB;AAMA,MAAMC,gBAAgB,GAAGC,gBAAgB;AAAA,aAAC;AAAA,aAAO;AAC/CC,QAAAA,EAAE,EAAEP,CAAC,CAD0C,KAAA;AAE/CQ,QAAAA,EAAE,EAAEL,CAAC,CAACM;AAFyC,OAAP;AAAA,KAAD;;AAAA;AAAA,SA5F3C,CA4F2C;AAAA,SA3F3C;AA2F2C;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAzC;AAKA,MAAMC,qBAAqB,GAAGJ,gBAAgB;AAAA,2BAAO;AACnD,UAAIK,YAAY,GAAG;AACjBJ,QAAAA,EAAE,EAAEP,CAAC,CADY,KAAA;AAEjBQ,QAAAA,EAAE,EAAEL,CAAC,CAFY,KAAA;AAGjBR,QAAAA,OAAO,EAHU,GAAA;AAIjBiB,QAAAA,CAAC,EAAE3B;AAJc,OAAnB;;AAOA,UAAI,CAAJ,QAAA,EAAe;AACb,eAAA,YAAA;AACD;;AAED,UAAIC,QAAQ,CAARA,KAAAA,IAAkBL,cAAc,KAApC,gBAAA,EAA2D;AACzD,+CAAO,YAAP;AAEE+B,UAAAA,CAAC,EAAE;AAFL;AAID;;AAED,UAAMC,MAAM,GAAGC,MAAM,CAANA,GAAAA,CAAWA,MAAM,CAAhC,GAAeA,CAAf;AACA,UAAMC,eAAe,GAAGC,UAAU,CAChCC,YAAY,CACVf,UAAU,CADA,GACA,CADA,EAEVA,UAAU,CAAA,CAAA,EAAI;AACZgB,QAAAA,QAAQ,EADI,eAAA;AAEZL,QAAAA,MAAAA,EAAAA;AAFY,OAAJ,CAFA,CADoB,EAQhC,CARgC,CAAA,EAAlC,KAAkC,CAAlC;AAWA,UAAMM,KAAK,GAAGH,UAAU,CACtBC,YAAY,CACVf,UAAU,CADA,CACA,CADA,EAEVA,UAAU,CAAA,SAAA,EAAY;AACpBgB,QAAAA,QAAQ,EADY,eAAA;AAEpBL,QAAAA,MAAAA,EAAAA;AAFoB,OAAZ,CAFA,CADU,EAQtB,CARsB,CAAA,EAAxB,KAAwB,CAAxB;;AAYA,UAAIhC,cAAc,KAAlB,gBAAA,EAAyC;AACvC,+CAAO,YAAP;AAEEc,UAAAA,OAAO,EAAET,QAAQ,CAARA,KAAAA,GAAiBgB,UAAU,CAA3BhB,CAA2B,CAA3BA,GAFJ,eAAP;AAGE0B,UAAAA,CAAC,EAAE1B,QAAQ,CAARA,KAAAA,GAAiBgB,UAAU,CAA3BhB,CAA2B,CAA3BA,GAAiCiC;AAHtC;AAKD;;AACD,6CAAO,YAAP;AAEExB,QAAAA,OAAO,EAFF,eAAP;AAGEiB,QAAAA,CAAC,EAAEO;AAHL;AAlD4C,KAAA;;AAAA;AAAA,SAhGhD,CAgGgD;AAAA,SAxFhD,CAwFgD;AAAA,iBAvC1B,SAuC0B;AAAA,gBAjF1C7C,QAiF0C;AAAA,gBArCXgB,QAqCW;AAAA,sBArC9C,cAqC8C;AAAA;AAAA,aA5ChC,MAAG,CAAA,GA4C6B;AAAA,aA5C7B,MAAA,CARU;AAoDmB;AAAA,kBAvC1B,UAuC0B;AAAA,oBAvC1B,YAuC0B;AAAA,kBAvC1B,UAuC0B;AAAA,uBAtCxC;AAsCwC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,OAuD3C,CA9FiB,SA8FjB,CAvD2C,CAA9C;AA2DA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,QAAA,CAAA;AACE,IAAA,aAAa,EADf,gBAAA;AAEE,IAAA,CAAC,EAFH,IAAA;AAGE,IAAA,IAAI,EAHN,KAAA;AAIE,IAAA,OAAO,EAAEK;AAJX,GAAA,EADF,QACE,CAAA,CADF,EAQGjB,WAAW,IACV,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,QAAA,CAAA;AACE,IAAA,aAAa,EADf,qBAAA;AAEE,IAAA,IAAI,EAAEF;AAFR,GAAA,EAVN,aAUM,CAAA,CATJ,CADF;AAkBD","sourcesContent":["import * as React from 'react';\nimport Animated, {\n  Easing,\n  useAnimatedProps,\n  useDerivedValue,\n  withRepeat,\n  withSequence,\n  withTiming,\n} from 'react-native-reanimated';\nimport { Circle, CircleProps } from 'react-native-svg';\nimport { getYForX, parse } from 'react-native-redash';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPathContext } from './ChartPath';\nimport { useLineChart } from './useLineChart';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nexport type LineChartDotProps = {\n  dotProps?: Animated.AnimateProps<CircleProps>;\n  outerDotProps?: Animated.AnimateProps<CircleProps>;\n  color?: string;\n  inactiveColor?: string;\n  showInactiveColor?: boolean;\n  at: number;\n  size?: number;\n  hasPulse?: boolean;\n  hasOuterDot?: boolean;\n  /**\n   * If `always`, the outer dot will still animate when interaction is active.\n   *\n   * If `while-inactive`, the outer dot will animate only when the interaction is inactive.\n   *\n   * Default: `while-inactive`\n   */\n  pulseBehaviour?: 'always' | 'while-inactive';\n  /**\n   * Defaults to `size * 4`\n   */\n  outerSize?: number;\n  pulseDurationMs?: number;\n};\n\nLineChartDot.displayName = 'LineChartDot';\n\nexport function LineChartDot({\n  at,\n  color: defaultColor = 'black',\n  dotProps,\n  hasOuterDot: defaultHasOuterDot = false,\n  hasPulse = false,\n  inactiveColor,\n  outerDotProps,\n  pulseBehaviour = 'while-inactive',\n  pulseDurationMs = 800,\n  showInactiveColor = true,\n  size = 4,\n  outerSize = size * 4,\n}: LineChartDotProps) {\n  const { data, isActive } = useLineChart();\n  const { path, pathWidth: width } = React.useContext(\n    LineChartDimensionsContext\n  );\n\n  ////////////////////////////////////////////////////////////\n\n  const { isInactive: _isInactive } = React.useContext(LineChartPathContext);\n  const isInactive = showInactiveColor && _isInactive;\n  const color = isInactive ? inactiveColor || defaultColor : defaultColor;\n  const opacity = isInactive && !inactiveColor ? 0.5 : 1;\n  const hasOuterDot = defaultHasOuterDot || hasPulse;\n\n  ////////////////////////////////////////////////////////////\n\n  const parsedPath = React.useMemo(() => parse(path), [path]);\n\n  ////////////////////////////////////////////////////////////\n\n  const pointWidth = React.useMemo(\n    () => width / (data.length - 1),\n    [data.length, width]\n  );\n\n  ////////////////////////////////////////////////////////////\n\n  const x = useDerivedValue(() => withTiming(pointWidth * at));\n  const y = useDerivedValue(() =>\n    withTiming(getYForX(parsedPath!, x.value) || 0)\n  );\n\n  ////////////////////////////////////////////////////////////\n\n  const animatedDotProps = useAnimatedProps(() => ({\n    cx: x.value,\n    cy: y.value,\n  }));\n\n  const animatedOuterDotProps = useAnimatedProps(() => {\n    let defaultProps = {\n      cx: x.value,\n      cy: y.value,\n      opacity: 0.1,\n      r: outerSize,\n    };\n\n    if (!hasPulse) {\n      return defaultProps;\n    }\n\n    if (isActive.value && pulseBehaviour === 'while-inactive') {\n      return {\n        ...defaultProps,\n        r: 0,\n      };\n    }\n\n    const easing = Easing.out(Easing.sin);\n    const animatedOpacity = withRepeat(\n      withSequence(\n        withTiming(0.8),\n        withTiming(0, {\n          duration: pulseDurationMs,\n          easing,\n        })\n      ),\n      -1,\n      false\n    );\n    const scale = withRepeat(\n      withSequence(\n        withTiming(0),\n        withTiming(outerSize, {\n          duration: pulseDurationMs,\n          easing,\n        })\n      ),\n      -1,\n      false\n    );\n\n    if (pulseBehaviour === 'while-inactive') {\n      return {\n        ...defaultProps,\n        opacity: isActive.value ? withTiming(0) : animatedOpacity,\n        r: isActive.value ? withTiming(0) : scale,\n      };\n    }\n    return {\n      ...defaultProps,\n      opacity: animatedOpacity,\n      r: scale,\n    };\n  }, [outerSize]);\n\n  ////////////////////////////////////////////////////////////\n\n  return (\n    <>\n      <AnimatedCircle\n        animatedProps={animatedDotProps}\n        r={size}\n        fill={color}\n        opacity={opacity}\n        {...dotProps}\n      />\n      {hasOuterDot && (\n        <AnimatedCircle\n          animatedProps={animatedOuterDotProps}\n          fill={color}\n          {...outerDotProps}\n        />\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}