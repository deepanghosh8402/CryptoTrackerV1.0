{"ast":null,"code":"import { useDerivedValue } from 'react-native-reanimated';\nimport { formatPrice } from \"../../utils\";\nimport { useLineChart } from \"./useLineChart\";\nexport function useLineChartPrice() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      format = _ref.format,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 2 : _ref$precision;\n\n  var _useLineChart = useLineChart(),\n      currentIndex = _useLineChart.currentIndex,\n      data = _useLineChart.data;\n\n  var float = useDerivedValue(function () {\n    var _f = function _f() {\n      if (typeof currentIndex.value === 'undefined' || currentIndex.value === -1) return '';\n      var price = 0;\n      price = data[currentIndex.value].value;\n      return price.toFixed(precision).toString();\n    };\n\n    _f._closure = {\n      currentIndex: currentIndex,\n      data: data,\n      precision: precision\n    };\n    _f.asString = \"function _f(){const{currentIndex,data,precision}=jsThis._closure;{if(typeof currentIndex.value==='undefined'||currentIndex.value===-1)return'';let price=0;price=data[currentIndex.value].value;return price.toFixed(precision).toString();}}\";\n    _f.__workletHash = 2774035531547;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\usePrice.js (12:32)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var formatted = useDerivedValue(function () {\n    var _f = function _f() {\n      var value = float.value || '';\n      var formattedPrice = value ? formatPrice({\n        value: value\n      }) : '';\n      return format ? format({\n        value: value,\n        formatted: formattedPrice\n      }) : formattedPrice;\n    };\n\n    _f._closure = {\n      float: float,\n      formatPrice: formatPrice,\n      format: format\n    };\n    _f.asString = \"function _f(){const{float,formatPrice,format}=jsThis._closure;{let value=float.value||'';const formattedPrice=value?formatPrice({value:value}):'';return format?format({value:value,formatted:formattedPrice}):formattedPrice;}}\";\n    _f.__workletHash = 1486887790099;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\usePrice.js (18:36)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return {\n    value: float,\n    formatted: formatted\n  };\n}","map":{"version":3,"sources":["usePrice.ts"],"names":["useLineChart","useLineChartPrice","precision","data","float","useDerivedValue","currentIndex","price","formatted","value","formattedPrice","formatPrice","format"],"mappings":"AAAA,SAAA,eAAA,QAAA,yBAAA;AAEA,SAAA,WAAA;AAEA,SAASA,YAAT;AAEA,OAAO,SAASC,iBAAT,GAGwD;AAAA,iFAHxD,EAGwD;AAAA,MAH7B,MAG6B,QAH7B,MAG6B;AAAA,4BAD7DC,SAC6D;AAAA,MAD7DA,SAC6D,+BADjD,CACiD;;AAC7D,sBAA+BF,YAA/B,EAAA;AAAA,MAAM,YAAN,iBAAM,YAAN;AAAA,MAAsBG,IAAtB,iBAAsBA,IAAtB;;AAEA,MAAMC,KAAK,GAAGC,eAAe;AAAA,2BAAO;AAClC,UAAI,OAAOC,YAAY,CAAnB,KAAA,KAAA,WAAA,IAA6CA,YAAY,CAAZA,KAAAA,KAAuB,CAAxE,CAAA,EACE,OAAA,EAAA;AACF,UAAIC,KAAK,GAAT,CAAA;AACAA,MAAAA,KAAK,GAAGJ,IAAI,CAACG,YAAY,CAAjBH,KAAI,CAAJA,CAARI,KAAAA;AACA,aAAOA,KAAK,CAALA,OAAAA,CAAAA,SAAAA,EAAP,QAAOA,EAAP;AALF,KAA6B;;AAAA;AAAA,oBANG,YAMH;AAAA,YANG,IAMH;AAAA,iBAJjB;AAIiB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAA7B;AAOA,MAAMC,SAAS,GAAGH,eAAe;AAAA,2BAAO;AACtC,UAAII,KAAK,GAAGL,KAAK,CAALA,KAAAA,IAAZ,EAAA;AACA,UAAMM,cAAc,GAAGD,KAAK,GAAGE,WAAW,CAAC;AAAEF,QAAAA,KAAAA,EAAAA;AAAF,OAAD,CAAd,GAA5B,EAAA;AACA,aAAOG,MAAM,GACTA,MAAM,CAAC;AAAEH,QAAAA,KAAF,EAAEA,KAAF;AAASD,QAAAA,SAAS,EAAEE;AAApB,OAAD,CADG,GAAb,cAAA;AAHF,KAAiC;;AAAA;AAAA,aAfnC,KAemC;AAAA,mBAb5B,WAa4B;AAAA,cAV4B;AAU5B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAjC;AAQA,SAAO;AAAED,IAAAA,KAAK,EAAP,KAAA;AAAgBD,IAAAA,SAAAA,EAAAA;AAAhB,GAAP;AACD","sourcesContent":["import { useDerivedValue } from 'react-native-reanimated';\n\nimport { formatPrice } from '../../utils';\nimport type { TFormatterFn } from '../candle/types';\nimport { useLineChart } from './useLineChart';\n\nexport function useLineChartPrice({\n  format,\n  precision = 2,\n}: { format?: TFormatterFn<string>; precision?: number } = {}) {\n  const { currentIndex, data } = useLineChart();\n\n  const float = useDerivedValue(() => {\n    if (typeof currentIndex.value === 'undefined' || currentIndex.value === -1)\n      return '';\n    let price = 0;\n    price = data[currentIndex.value].value;\n    return price.toFixed(precision).toString();\n  });\n  const formatted = useDerivedValue(() => {\n    let value = float.value || '';\n    const formattedPrice = value ? formatPrice({ value }) : '';\n    return format\n      ? format({ value, formatted: formattedPrice })\n      : formattedPrice;\n  });\n\n  return { value: float, formatted };\n}\n"]},"metadata":{},"sourceType":"module"}