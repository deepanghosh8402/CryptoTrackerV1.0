{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { parse } from 'react-native-redash';\nimport { LineChartDimensionsContext } from \"../Chart\";\nimport { useLineChart } from \"../useLineChart\";\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nvar isEnabled = false;\n\nif (canUseDOM) {\n  var HOVER_THRESHOLD_MS = 1000;\n  var lastTouchTimestamp = 0;\n\n  function enableHover() {\n    if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n      return;\n    }\n\n    isEnabled = true;\n  }\n\n  function disableHover() {\n    lastTouchTimestamp = Date.now();\n\n    if (isEnabled) {\n      isEnabled = false;\n    }\n  }\n\n  document.addEventListener('touchstart', disableHover, true);\n  document.addEventListener('touchmove', disableHover, true);\n  document.addEventListener('mousemove', enableHover, true);\n}\n\nfunction isHoverEnabled() {\n  return isEnabled;\n}\n\nexport var LineChartHoverTrap = function LineChartHoverTrap() {\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n      width = _React$useContext.width,\n      path = _React$useContext.path;\n\n  var _useLineChart = useLineChart(),\n      currentX = _useLineChart.currentX,\n      currentIndex = _useLineChart.currentIndex,\n      isActive = _useLineChart.isActive,\n      data = _useLineChart.data;\n\n  var parsedPath = React.useMemo(function () {\n    return path ? parse(path) : undefined;\n  }, [path]);\n  var onMouseMove = React.useCallback(function (_ref) {\n    var x = _ref.x;\n\n    if (isHoverEnabled()) {\n      if (parsedPath) {\n        var boundedX = Math.min(x, width);\n        isActive.value = true;\n        currentX.value = boundedX;\n        var minIndex = 0;\n        var boundedIndex = Math.max(minIndex, Math.round(boundedX / width / (1 / (data.length - 1))));\n        currentIndex.value = boundedIndex;\n      }\n    } else {\n      isActive.value = false;\n      currentIndex.value = -1;\n    }\n  }, [currentIndex, currentX, data.length, isActive, parsedPath, width]);\n  var onMouseLeave = React.useCallback(function () {\n    isActive.value = false;\n    currentIndex.value = -1;\n  }, [currentIndex, isActive]);\n  return React.createElement(View, {\n    style: StyleSheet.absoluteFill,\n    onMouseMove: React.useCallback(function (e) {\n      var rect = e.currentTarget.getBoundingClientRect();\n      var x = e.clientX - rect.left;\n      onMouseMove({\n        x: x\n      });\n    }, [onMouseMove]),\n    onMouseLeave: onMouseLeave\n  });\n};","map":{"version":3,"sources":["index.web.tsx"],"names":["isEnabled","HOVER_THRESHOLD_MS","lastTouchTimestamp","Date","document","LineChartHoverTrap","path","React","data","useLineChart","parsedPath","parse","onMouseMove","x","isHoverEnabled","boundedX","Math","isActive","currentX","minIndex","boundedIndex","currentIndex","onMouseLeave","StyleSheet","e","rect"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { parse } from 'react-native-redash';\n\nimport { LineChartDimensionsContext } from '../Chart';\nimport { useLineChart } from '../useLineChart';\n\n// @ts-expect-error missing types\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nlet isEnabled = false;\n\n// the following logic comes from the creator of react-native-web\n// https://gist.github.com/necolas/1c494e44e23eb7f8c5864a2fac66299a\n// it's also used by MotiPressable's hover interactions\n// https://github.com/nandorojo/moti/blob/master/packages/interactions/src/pressable/hoverable.tsx\nif (canUseDOM) {\n  /**\n   * Web browsers emulate mouse events (and hover states) after touch events.\n   * This code infers when the currently-in-use modality supports hover\n   * (including for multi-modality devices) and considers \"hover\" to be enabled\n   * if a mouse movement occurs more than 1 second after the last touch event.\n   * This threshold is long enough to account for longer delays between the\n   * browser firing touch and mouse events on low-powered devices.\n   */\n  const HOVER_THRESHOLD_MS = 1000;\n  let lastTouchTimestamp = 0;\n\n  function enableHover() {\n    if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n      return;\n    }\n    isEnabled = true;\n  }\n\n  function disableHover() {\n    lastTouchTimestamp = Date.now();\n    if (isEnabled) {\n      isEnabled = false;\n    }\n  }\n\n  document.addEventListener('touchstart', disableHover, true);\n  document.addEventListener('touchmove', disableHover, true);\n  document.addEventListener('mousemove', enableHover, true);\n}\n\nfunction isHoverEnabled(): boolean {\n  return isEnabled;\n}\n\nexport const LineChartHoverTrap = () => {\n  const { width, path } = React.useContext(LineChartDimensionsContext);\n  const { currentX, currentIndex, isActive, data } = useLineChart();\n\n  const parsedPath = React.useMemo(\n    () => (path ? parse(path) : undefined),\n    [path]\n  );\n\n  const onMouseMove = React.useCallback(\n    ({ x }: { x: number }) => {\n      if (isHoverEnabled()) {\n        if (parsedPath) {\n          const boundedX = Math.min(x, width);\n          isActive.value = true;\n          currentX.value = boundedX;\n\n          // on Web, we could drag the cursor to be negative, breaking it\n          // so we clamp the index at 0 to fix it\n          // https://github.com/coinjar/react-native-wagmi-charts/issues/24\n          const minIndex = 0;\n          const boundedIndex = Math.max(\n            minIndex,\n            Math.round(boundedX / width / (1 / (data.length - 1)))\n          );\n\n          currentIndex.value = boundedIndex;\n        }\n      } else {\n        isActive.value = false;\n        currentIndex.value = -1;\n      }\n    },\n    [currentIndex, currentX, data.length, isActive, parsedPath, width]\n  );\n\n  const onMouseLeave = React.useCallback(() => {\n    isActive.value = false;\n    currentIndex.value = -1;\n  }, [currentIndex, isActive]);\n\n  return (\n    <View\n      style={StyleSheet.absoluteFill}\n      // @ts-expect-error mouse move event\n      onMouseMove={React.useCallback(\n        // eslint-disable-next-line no-undef\n        (e: React.MouseEvent<HTMLElement>) => {\n          let rect = e.currentTarget.getBoundingClientRect();\n          let x = e.clientX - rect.left; // x position within the element.\n\n          onMouseMove({ x });\n        },\n        [onMouseMove]\n      )}\n      onMouseLeave={onMouseLeave}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}