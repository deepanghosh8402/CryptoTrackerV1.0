{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"color\", \"size\", \"outerSize\", \"crosshairWrapperProps\", \"crosshairProps\", \"crosshairOuterProps\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated, { useAnimatedStyle, withSpring } from 'react-native-reanimated';\nimport { LineChartCursor } from \"./Cursor\";\nimport { useLineChart } from \"./useLineChart\";\nLineChartCursorCrosshair.displayName = 'LineChartCursorCrosshair';\nexport function LineChartCursorCrosshair(_ref) {\n  var children = _ref.children,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'black' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 8 : _ref$size,\n      _ref$outerSize = _ref.outerSize,\n      outerSize = _ref$outerSize === void 0 ? 32 : _ref$outerSize,\n      _ref$crosshairWrapper = _ref.crosshairWrapperProps,\n      crosshairWrapperProps = _ref$crosshairWrapper === void 0 ? {} : _ref$crosshairWrapper,\n      _ref$crosshairProps = _ref.crosshairProps,\n      crosshairProps = _ref$crosshairProps === void 0 ? {} : _ref$crosshairProps,\n      _ref$crosshairOuterPr = _ref.crosshairOuterProps,\n      crosshairOuterProps = _ref$crosshairOuterPr === void 0 ? {} : _ref$crosshairOuterPr,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useLineChart = useLineChart(),\n      currentX = _useLineChart.currentX,\n      currentY = _useLineChart.currentY,\n      isActive = _useLineChart.isActive;\n\n  var _React$useState = React.useState(Platform.OS === 'ios'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      enableSpringAnimation = _React$useState2[0],\n      setEnableSpringAnimation = _React$useState2[1];\n\n  React.useEffect(function () {\n    setTimeout(function () {\n      setEnableSpringAnimation(true);\n    }, 100);\n  }, []);\n  var animatedCursorStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      return {\n        transform: [{\n          translateX: currentX.value - outerSize / 2\n        }, {\n          translateY: currentY.value - outerSize / 2\n        }, {\n          scale: enableSpringAnimation ? withSpring(isActive.value ? 1 : 0, {\n            damping: 10\n          }) : 0\n        }]\n      };\n    };\n\n    _f._closure = {\n      currentX: currentX,\n      outerSize: outerSize,\n      currentY: currentY,\n      enableSpringAnimation: enableSpringAnimation,\n      withSpring: withSpring,\n      isActive: isActive\n    };\n    _f.asString = \"function _f(){const{currentX,outerSize,currentY,enableSpringAnimation,withSpring,isActive}=jsThis._closure;{return{transform:[{translateX:currentX.value-outerSize/2},{translateY:currentY.value-outerSize/2},{scale:enableSpringAnimation?withSpring(isActive.value?1:0,{damping:10}):0}]};}}\";\n    _f.__workletHash = 8119768448137;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\CursorCrosshair.js (31:47)\";\n    _f.__optimalization = 2;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return React.createElement(LineChartCursor, _extends({\n    type: \"crosshair\"\n  }, props), React.createElement(Animated.View, _extends({}, crosshairWrapperProps, {\n    style: [{\n      width: outerSize,\n      height: outerSize,\n      alignItems: 'center',\n      justifyContent: 'center'\n    }, animatedCursorStyle, crosshairWrapperProps.style]\n  }), React.createElement(View, _extends({}, crosshairOuterProps, {\n    style: [{\n      backgroundColor: color,\n      width: outerSize,\n      height: outerSize,\n      borderRadius: outerSize,\n      opacity: 0.1,\n      position: 'absolute'\n    }, crosshairOuterProps.style]\n  })), React.createElement(View, _extends({}, crosshairProps, {\n    style: [{\n      backgroundColor: color,\n      width: size,\n      height: size,\n      borderRadius: size\n    }, crosshairProps.style]\n  }))), children);\n}","map":{"version":3,"sources":["CursorCrosshair.tsx"],"names":["LineChartCursor","LineChartCursorCrosshair","displayName","color","size","outerSize","crosshairWrapperProps","crosshairProps","crosshairOuterProps","props","isActive","useLineChart","React","Platform","setTimeout","setEnableSpringAnimation","animatedCursorStyle","useAnimatedStyle","transform","translateX","currentX","translateY","currentY","scale","enableSpringAnimation","withSpring","damping","width","height","alignItems","justifyContent","backgroundColor","borderRadius","opacity","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, View, ViewProps } from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  withSpring,\n} from 'react-native-reanimated';\n\nimport { LineChartCursor, LineChartCursorProps } from './Cursor';\nimport { useLineChart } from './useLineChart';\n\ntype LineChartCursorCrosshairProps = Omit<\n  LineChartCursorProps,\n  'children' | 'type'\n> & {\n  children?: React.ReactNode;\n  color?: string;\n  size?: number;\n  outerSize?: number;\n  crosshairWrapperProps?: Animated.AnimateProps<ViewProps>;\n  crosshairProps?: ViewProps;\n  crosshairOuterProps?: ViewProps;\n};\n\nLineChartCursorCrosshair.displayName = 'LineChartCursorCrosshair';\n\nexport function LineChartCursorCrosshair({\n  children,\n  color = 'black',\n  size = 8,\n  outerSize = 32,\n  crosshairWrapperProps = {},\n  crosshairProps = {},\n  crosshairOuterProps = {},\n  ...props\n}: LineChartCursorCrosshairProps) {\n  const { currentX, currentY, isActive } = useLineChart();\n\n  // It seems that enabling spring animation on initial render on Android causes a crash.\n  const [enableSpringAnimation, setEnableSpringAnimation] = React.useState(\n    Platform.OS === 'ios'\n  );\n  React.useEffect(() => {\n    setTimeout(() => {\n      setEnableSpringAnimation(true);\n    }, 100);\n  }, []);\n\n  const animatedCursorStyle = useAnimatedStyle(() => ({\n    transform: [\n      { translateX: currentX.value - outerSize / 2 },\n      { translateY: currentY.value - outerSize / 2 },\n      {\n        scale: enableSpringAnimation\n          ? withSpring(isActive.value ? 1 : 0, {\n              damping: 10,\n            })\n          : 0,\n      },\n    ],\n  }));\n\n  return (\n    <LineChartCursor type=\"crosshair\" {...props}>\n      <Animated.View\n        {...crosshairWrapperProps}\n        style={[\n          {\n            width: outerSize,\n            height: outerSize,\n            alignItems: 'center',\n            justifyContent: 'center',\n          },\n          animatedCursorStyle,\n          crosshairWrapperProps.style,\n        ]}\n      >\n        <View\n          {...crosshairOuterProps}\n          style={[\n            {\n              backgroundColor: color,\n              width: outerSize,\n              height: outerSize,\n              borderRadius: outerSize,\n              opacity: 0.1,\n              position: 'absolute',\n            },\n            crosshairOuterProps.style,\n          ]}\n        />\n        <View\n          {...crosshairProps}\n          style={[\n            {\n              backgroundColor: color,\n              width: size,\n              height: size,\n              borderRadius: size,\n            },\n            crosshairProps.style,\n          ]}\n        />\n      </Animated.View>\n      {children}\n    </LineChartCursor>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}