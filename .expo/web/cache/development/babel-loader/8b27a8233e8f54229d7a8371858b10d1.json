{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { createContext, useContext, useMemo } from 'react';\nexport var DefaultLineChartId = '__LineChartData';\nvar LineChartDataContext = createContext(_defineProperty({}, DefaultLineChartId, []));\nexport function LineChartDataProvider(_ref) {\n  var children = _ref.children,\n      data = _ref.data;\n  var contextValue = useMemo(function () {\n    if (Array.isArray(data)) {\n      return _defineProperty({}, DefaultLineChartId, data);\n    }\n\n    return data;\n  }, [data]);\n  return React.createElement(LineChartDataContext.Provider, {\n    value: contextValue\n  }, children);\n}\nvar LineChartIdContext = createContext(undefined);\nexport function LineChartIdProvider(_ref3) {\n  var id = _ref3.id,\n      children = _ref3.children;\n  return React.createElement(LineChartIdContext.Provider, {\n    value: id\n  }, children);\n}\nexport var useLineChartId = function useLineChartId() {\n  return useContext(LineChartIdContext);\n};\nexport function useLineChartData(_ref4) {\n  var id = _ref4.id;\n  var dataContext = useContext(LineChartDataContext);\n  validateLineChartId(dataContext, id);\n  var data = dataContext[id || DefaultLineChartId];\n  return useMemo(function () {\n    return {\n      data: data\n    };\n  }, [data]);\n}\n\nfunction validateLineChartId(dataContext, id) {\n  if (id != null && !dataContext[id]) {\n    var otherIds = Object.keys(dataContext).filter(function (otherId) {\n      return otherId !== DefaultLineChartId;\n    });\n    var singular = otherIds.length <= 1;\n    var joinedIds = otherIds.join(', ');\n    var suggestion = otherIds.length ? \"Did you mean to use \" + (singular ? 'this ID' : 'one of these IDs') + \": \" + joinedIds : \"You didn't pass any IDs to your <LineChart.Provider />'s data prop. Did you mean to pass an array instead?\";\n    console.warn(\"[react-native-wagmi-charts] Invalid usage of \\\"id\\\" prop on LineChart. You passed id=\\\"\" + id + \"\\\", but this ID does not exist in your <LineChart.Provider />'s \\\"data\\\" prop.\\n\\n\" + suggestion);\n  } else if (id == null && !dataContext[DefaultLineChartId]) {\n    var _otherIds = Object.keys(dataContext);\n\n    var _singular = _otherIds.length <= 1;\n\n    var _joinedIds = _otherIds.join(', ');\n\n    var _suggestion = _otherIds.length ? \"Did you mean to use \" + (_singular ? 'this ID' : 'one of these IDs') + \": \" + _joinedIds : \"You didn't pass any IDs to your <LineChart.Provider />'s data prop. Did you mean to pass an array instead?\";\n\n    console.error(\"[react-native-wagmi-charts] Missing data \\\"id\\\" prop on LineChart. You must pass an id prop to <LineChart /> when using a dictionary for your data.\\n\\n\" + _suggestion + \"\\n    \");\n  }\n}","map":{"version":3,"sources":["Data.tsx"],"names":["DefaultLineChartId","LineChartDataContext","createContext","data","contextValue","useMemo","Array","LineChartIdContext","children","id","useLineChartId","useContext","dataContext","validateLineChartId","otherIds","Object","otherId","singular","joinedIds","suggestion","console"],"mappings":"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","sourcesContent":["import type { TLineChartData } from './types';\nimport React, { createContext, useContext, useMemo } from 'react';\nimport type { ReactNode } from 'react';\nimport type { TLineChartDataProp } from './types';\n\nexport const DefaultLineChartId = '__LineChartData';\n\nexport type LineChartDataContext = {\n  [key: string]: TLineChartData;\n};\n\nconst LineChartDataContext = createContext<LineChartDataContext>({\n  [DefaultLineChartId]: [],\n});\n\nexport type LineChartDataProviderProps = {\n  children: ReactNode;\n  data: TLineChartDataProp;\n};\n\nexport function LineChartDataProvider({\n  children,\n  data,\n}: LineChartDataProviderProps) {\n  const contextValue = useMemo<LineChartDataContext>(() => {\n    if (Array.isArray(data)) {\n      return {\n        [DefaultLineChartId]: data,\n      };\n    }\n    return data;\n  }, [data]);\n\n  return (\n    <LineChartDataContext.Provider value={contextValue}>\n      {children}\n    </LineChartDataContext.Provider>\n  );\n}\n\nconst LineChartIdContext = createContext<string | undefined>(undefined);\n\nexport function LineChartIdProvider({\n  id,\n  children,\n}: {\n  id?: string;\n  children: ReactNode;\n}) {\n  return (\n    <LineChartIdContext.Provider value={id}>\n      {children}\n    </LineChartIdContext.Provider>\n  );\n}\n\nexport const useLineChartId = () => useContext(LineChartIdContext);\n\nexport function useLineChartData({ id }: { id?: string }) {\n  const dataContext = useContext(LineChartDataContext);\n\n  validateLineChartId(dataContext, id);\n\n  const data = dataContext[id || DefaultLineChartId];\n\n  return useMemo(() => ({ data }), [data]);\n}\n\nfunction validateLineChartId(dataContext: LineChartDataContext, id?: string) {\n  if (id != null && !dataContext[id]) {\n    const otherIds = Object.keys(dataContext).filter(\n      (otherId) => otherId !== DefaultLineChartId\n    );\n    const singular = otherIds.length <= 1;\n\n    const joinedIds = otherIds.join(', ');\n\n    const suggestion = otherIds.length\n      ? `Did you mean to use ${\n          singular ? 'this ID' : 'one of these IDs'\n        }: ${joinedIds}`\n      : `You didn't pass any IDs to your <LineChart.Provider />'s data prop. Did you mean to pass an array instead?`;\n\n    console.warn(\n      `[react-native-wagmi-charts] Invalid usage of \"id\" prop on LineChart. You passed id=\"${id}\", but this ID does not exist in your <LineChart.Provider />'s \"data\" prop.\n\n${suggestion}`\n    );\n  } else if (id == null && !dataContext[DefaultLineChartId]) {\n    const otherIds = Object.keys(dataContext);\n    const singular = otherIds.length <= 1;\n\n    const joinedIds = otherIds.join(', ');\n    const suggestion = otherIds.length\n      ? `Did you mean to use ${\n          singular ? 'this ID' : 'one of these IDs'\n        }: ${joinedIds}`\n      : `You didn't pass any IDs to your <LineChart.Provider />'s data prop. Did you mean to pass an array instead?`;\n\n    console.error(`[react-native-wagmi-charts] Missing data \"id\" prop on LineChart. You must pass an id prop to <LineChart /> when using a dictionary for your data.\n\n${suggestion}\n    `);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}