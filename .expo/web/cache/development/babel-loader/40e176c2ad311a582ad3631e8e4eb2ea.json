{"ast":null,"code":"import { useDerivedValue } from 'react-native-reanimated';\nimport { formatDatetime } from \"../../utils\";\nimport { useCandleData } from \"./useCandleData\";\nexport function useCandlestickChartDatetime() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      format = _ref.format,\n      locale = _ref.locale,\n      options = _ref.options;\n\n  var candle = useCandleData();\n  var timestamp = useDerivedValue(function () {\n    var _f = function _f() {\n      return candle.value.timestamp;\n    };\n\n    _f._closure = {\n      candle: candle\n    };\n    _f.asString = \"function _f(){const{candle}=jsThis._closure;{return candle.value.timestamp;}}\";\n    _f.__workletHash = 10754054774387;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\candle\\\\useDatetime.js (10:36)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var timestampString = useDerivedValue(function () {\n    var _f = function _f() {\n      if (timestamp.value === -1) return '';\n      return timestamp.value.toString();\n    };\n\n    _f._closure = {\n      timestamp: timestamp\n    };\n    _f.asString = \"function _f(){const{timestamp}=jsThis._closure;{if(timestamp.value===-1)return'';return timestamp.value.toString();}}\";\n    _f.__workletHash = 7820269266855;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\candle\\\\useDatetime.js (13:42)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var formatted = useDerivedValue(function () {\n    var _f = function _f() {\n      if (timestamp.value === -1) return '';\n      var formattedDatetime = formatDatetime({\n        value: timestamp.value,\n        locale: locale,\n        options: options\n      });\n      return format ? format({\n        value: timestamp.value,\n        formatted: formattedDatetime\n      }) : formattedDatetime;\n    };\n\n    _f._closure = {\n      timestamp: timestamp,\n      formatDatetime: formatDatetime,\n      locale: locale,\n      options: options,\n      format: format\n    };\n    _f.asString = \"function _f(){const{timestamp,formatDatetime,locale,options,format}=jsThis._closure;{if(timestamp.value===-1)return'';const formattedDatetime=formatDatetime({value:timestamp.value,locale:locale,options:options});return format?format({value:timestamp.value,formatted:formattedDatetime}):formattedDatetime;}}\";\n    _f.__workletHash = 10424359952839;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\candle\\\\useDatetime.js (17:36)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return {\n    value: timestampString,\n    formatted: formatted\n  };\n}","map":{"version":3,"sources":["useDatetime.ts"],"names":["useCandlestickChartDatetime","locale","options","candle","useCandleData","timestamp","useDerivedValue","timestampString","formatted","formattedDatetime","formatDatetime","value","format"],"mappings":"AAAA,SAAA,eAAA,QAAA,yBAAA;AAEA,SAAA,cAAA;AAEA,SAAA,aAAA;AAEA,OAAO,SAASA,2BAAT,GAWL;AAAA,iFAXK,EAWL;AAAA,MAX0C,MAW1C,QAX0C,MAW1C;AAAA,MATAC,MASA,QATAA,MASA;AAAA,MARAC,OAQA,QARAA,OAQA;;AACA,MAAMC,MAAM,GAAGC,aAAf,EAAA;AAEA,MAAMC,SAAS,GAAGC,eAAe;AAAA,2BAAO;AACtC,aAAOH,MAAM,CAANA,KAAAA,CAAP,SAAA;AADF,KAAiC;;AAAA;AAAA,cAhBnC;AAgBmC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAjC;AAIA,MAAMI,eAAe,GAAGD,eAAe;AAAA,2BAAO;AAC5C,UAAID,SAAS,CAATA,KAAAA,KAAoB,CAAxB,CAAA,EAA4B,OAAA,EAAA;AAC5B,aAAOA,SAAS,CAATA,KAAAA,CAAP,QAAOA,EAAP;AAFF,KAAuC;;AAAA;AAAA,iBAlBlC;AAkBkC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAvC;AAKA,MAAMG,SAAS,GAAGF,eAAe;AAAA,2BAAO;AACtC,UAAID,SAAS,CAATA,KAAAA,KAAoB,CAAxB,CAAA,EAA4B,OAAA,EAAA;AAC5B,UAAMI,iBAAiB,GAAGC,cAAc,CAAC;AACvCC,QAAAA,KAAK,EAAEN,SAAS,CADuB,KAAA;AAEvCJ,QAAAA,MAFuC,EAEvCA,MAFuC;AAGvCC,QAAAA,OAAAA,EAAAA;AAHuC,OAAD,CAAxC;AAKA,aAAOU,MAAM,GACTA,MAAM,CAAC;AAAED,QAAAA,KAAK,EAAEN,SAAS,CAAlB,KAAA;AAA0BG,QAAAA,SAAS,EAAEC;AAArC,OAAD,CADG,GAAb,iBAAA;AAPF,KAAiC;;AAAA;AAAA,iBAT3BJ,SAS2B;AAAA,sBAvB5B,cAuB4B;AAAA,cAvBS,MAuBT;AAAA,eApBjCH,OAoBiC;AAAA,cAXlBE;AAWkB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAjC;AAYA,SAAO;AAAEO,IAAAA,KAAK,EAAP,eAAA;AAA0BH,IAAAA,SAAAA,EAAAA;AAA1B,GAAP;AACD","sourcesContent":["import Animated, { useDerivedValue } from 'react-native-reanimated';\n\nimport { formatDatetime } from '../../utils';\nimport type { TFormatterFn } from './types';\nimport { useCandleData } from './useCandleData';\n\nexport function useCandlestickChartDatetime({\n  format,\n  locale,\n  options,\n}: {\n  format?: TFormatterFn<number>;\n  locale?: string;\n  options?: { [key: string]: string };\n} = {}): {\n  value: Readonly<Animated.SharedValue<string>>;\n  formatted: Readonly<Animated.SharedValue<string>>;\n} {\n  const candle = useCandleData();\n\n  const timestamp = useDerivedValue(() => {\n    return candle.value.timestamp;\n  });\n\n  const timestampString = useDerivedValue(() => {\n    if (timestamp.value === -1) return '';\n    return timestamp.value.toString();\n  });\n\n  const formatted = useDerivedValue(() => {\n    if (timestamp.value === -1) return '';\n    const formattedDatetime = formatDatetime({\n      value: timestamp.value,\n      locale,\n      options,\n    });\n    return format\n      ? format({ value: timestamp.value, formatted: formattedDatetime })\n      : formattedDatetime;\n  });\n\n  return { value: timestampString, formatted };\n}\n"]},"metadata":{},"sourceType":"module"}