{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/jake/git/react-native-candlestick-chart/example/src/LineChart.tsx\";\nimport * as React from 'react';\nimport { Box, Button, Flex, Heading, Stack, Text } from 'bumbag-native';\nimport { LineChart } from \"/Users/jake/git/react-native-candlestick-chart/src/index\";\nimport * as haptics from 'expo-haptics';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport mockData from \"./data/line-data.json\";\nimport mockData2 from \"./data/line-data2.json\";\n\nfunction invokeHaptic() {\n  if (['ios', 'android'].includes(Platform.OS)) {\n    haptics.impactAsync(haptics.ImpactFeedbackStyle.Light);\n  }\n}\n\nexport default function App() {\n  var _React$useState = React.useState(mockData),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var _React$useReducer = React.useReducer(function (state) {\n    return !state;\n  }, false),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      multiData = _React$useReducer2[0],\n      toggleMultiData = _React$useReducer2[1];\n\n  var _React$useReducer3 = React.useReducer(function (state) {\n    return !state;\n  }, false),\n      _React$useReducer4 = _slicedToArray(_React$useReducer3, 2),\n      partialDay = _React$useReducer4[0],\n      togglePartialDay = _React$useReducer4[1];\n\n  var _React$useState3 = React.useState(undefined),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      yRange = _React$useState4[0],\n      setYRange = _React$useState4[1];\n\n  var toggleYRange = function toggleYRange() {\n    setYRange(function (domain) {\n      if (!domain) {\n        return 'low';\n      }\n\n      if (domain === 'low') {\n        return 'high';\n      }\n\n      return undefined;\n    });\n  };\n\n  var dataProp = data;\n  var chart = React.createElement(LineChart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(LineChart.Path, {\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, React.createElement(LineChart.Gradient, {\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), React.createElement(LineChart.HorizontalLine, {\n    at: {\n      value: 33215.61\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), partialDay && React.createElement(LineChart.Dot, {\n    at: data.length - 1,\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 24\n    }\n  })), React.createElement(LineChart.CursorCrosshair, {\n    onActivated: invokeHaptic,\n    onEnded: invokeHaptic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, React.createElement(LineChart.Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })));\n\n  if (multiData) {\n    dataProp = {\n      one: mockData,\n      two: mockData2\n    };\n    chart = React.createElement(LineChart.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, React.createElement(LineChart, {\n      id: \"one\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, React.createElement(LineChart.Path, {\n      color: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }), React.createElement(LineChart.CursorCrosshair, {\n      onActivated: invokeHaptic,\n      onEnded: invokeHaptic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, React.createElement(LineChart.Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }))), React.createElement(LineChart, {\n      id: \"two\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, React.createElement(LineChart.Path, {\n      color: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, React.createElement(LineChart.Gradient, {\n      color: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }), React.createElement(LineChart.HorizontalLine, {\n      at: {\n        index: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    })), React.createElement(LineChart.CursorCrosshair, {\n      onActivated: invokeHaptic,\n      onEnded: invokeHaptic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, React.createElement(LineChart.Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Heading.H5, {\n    paddingX: \"major-2\",\n    marginBottom: \"major-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"Line Chart \\uD83D\\uDCC8\"), React.createElement(LineChart.Provider, {\n    xLength: partialDay ? data.length * 2 : undefined,\n    yRange: {\n      min: yRange === 'low' ? Math.min.apply(Math, _toConsumableArray(data.map(function (d) {\n        return d.value;\n      }))) / 1.1 : undefined,\n      max: yRange === 'high' ? Math.max.apply(Math, _toConsumableArray(data.map(function (d) {\n        return d.value;\n      }))) * 1.1 : undefined\n    },\n    data: dataProp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, chart, React.createElement(Box, {\n    marginX: \"major-2\",\n    marginTop: \"major-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, React.createElement(Heading.H6, {\n    marginBottom: 'major-2',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"Load Data\"), React.createElement(Flex, {\n    flexWrap: 'wrap',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      return setData(mockData);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"Data 1\"), React.createElement(Button, {\n    onPress: function onPress() {\n      return setData(mockData2);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"Data 2\"), React.createElement(Button, {\n    onPress: function onPress() {\n      return setData([].concat(_toConsumableArray(mockData), _toConsumableArray(mockData2)));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Data 1 + Data 2\"), React.createElement(Button, {\n    onPress: function onPress() {\n      return setData([].concat(_toConsumableArray(mockData2), _toConsumableArray(mockData)));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Data 2 + Data 1\"), React.createElement(Button, {\n    onPress: function onPress() {\n      return setData([].concat(_toConsumableArray(mockData2), _toConsumableArray(mockData), _toConsumableArray(mockData2)));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"Data 2 + Data 1 + Data 2\"), React.createElement(Button, {\n    onPress: function onPress() {\n      return setData([].concat(_toConsumableArray(mockData2), _toConsumableArray(mockData), _toConsumableArray(mockData2), _toConsumableArray(mockData), _toConsumableArray(mockData), _toConsumableArray(mockData2), _toConsumableArray(mockData2), _toConsumableArray(mockData), _toConsumableArray(mockData2), _toConsumableArray(mockData), _toConsumableArray(mockData), _toConsumableArray(mockData2)));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, \"V large data\"), React.createElement(Button, {\n    onPress: toggleYRange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, (yRange || 'Set') + \" Y Domain\"), React.createElement(Button, {\n    onPress: toggleMultiData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"Multi Data\"), React.createElement(Button, {\n    onPress: togglePartialDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, \"Partial Day\"))), !multiData && React.createElement(Stack, {\n    padding: \"major-2\",\n    spacing: \"major-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, React.createElement(Heading.H6, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"PriceText\"), React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, \"Formatted: \"), React.createElement(LineChart.PriceText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  })), React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, \"Value: \"), React.createElement(LineChart.PriceText, {\n    variant: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  })), React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  }, \"Custom format: \"), React.createElement(LineChart.PriceText, {\n    format: function () {\n      var _f = function _f(d) {\n        return d.formatted ? \"$\" + d.formatted + \" AUD\" : '';\n      };\n\n      _f._closure = {};\n      _f.asString = \"function _f(d){return d.formatted?\\\"$\\\"+d.formatted+\\\" AUD\\\":'';}\";\n      _f.__workletHash = 2426682733727;\n      _f.__location = \"/Users/jake/git/react-native-candlestick-chart/example/src/LineChart.tsx (174:24)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  })), React.createElement(Heading.H6, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, \"DatetimeText\"), React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }, \"Formatted: \"), React.createElement(LineChart.DatetimeText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 15\n    }\n  })), React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  }, \"Value: \"), React.createElement(LineChart.DatetimeText, {\n    variant: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  })), React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    fontWeight: \"500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }, \"Custom format: \"), React.createElement(LineChart.DatetimeText, {\n    locale: \"en-AU\",\n    options: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/jake/git/react-native-candlestick-chart/example/src/LineChart.tsx"],"names":["React","Box","Button","Flex","Heading","Stack","Text","LineChart","haptics","mockData","mockData2","invokeHaptic","includes","Platform","OS","impactAsync","ImpactFeedbackStyle","Light","App","useState","data","setData","useReducer","state","multiData","toggleMultiData","partialDay","togglePartialDay","undefined","yRange","setYRange","toggleYRange","domain","dataProp","chart","value","length","one","two","index","min","Math","map","d","max","formatted","year","month","day","hour","minute","second"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Box, Button, Flex, Heading, Stack, Text } from 'bumbag-native';\nimport {\n  LineChart,\n  TLineChartDataProp,\n  TLineChartPoint,\n} from 'react-native-wagmi-charts';\nimport * as haptics from 'expo-haptics';\nimport { Platform } from 'react-native';\n\nimport mockData from './data/line-data.json';\nimport mockData2 from './data/line-data2.json';\n\nfunction invokeHaptic() {\n  if (['ios', 'android'].includes(Platform.OS)) {\n    haptics.impactAsync(haptics.ImpactFeedbackStyle.Light);\n  }\n}\n\nexport default function App() {\n  const [data, setData] = React.useState<TLineChartPoint[]>(mockData);\n  const [multiData, toggleMultiData] = React.useReducer(\n    (state) => !state,\n    false\n  ); \n  const [partialDay, togglePartialDay] = React.useReducer(\n    (state) => !state,\n    false\n  );\n\n  const [yRange, setYRange] = React.useState<undefined | 'low' | 'high'>(\n    undefined\n  );\n\n  const toggleYRange = () => {\n    setYRange((domain) => {\n      if (!domain) {\n        return 'low';\n      }\n      if (domain === 'low') {\n        return 'high';\n      }\n      return undefined;\n    });\n  };\n\n  let dataProp: TLineChartDataProp = data;\n\n  let chart = (\n    <LineChart>\n      <LineChart.Path color=\"red\">\n        <LineChart.Gradient color=\"black\" />\n        <LineChart.HorizontalLine at={{ value: 33215.61 }} /> \n        {partialDay && <LineChart.Dot at={data.length - 1} color=\"red\" />} \n      </LineChart.Path>\n      <LineChart.CursorCrosshair\n        onActivated={invokeHaptic}\n        onEnded={invokeHaptic}\n      >\n        <LineChart.Tooltip />\n      </LineChart.CursorCrosshair>\n    </LineChart>\n  );\n\n  if (multiData) {\n    dataProp = {\n      one: mockData,\n      two: mockData2,\n    };\n    chart = (\n      <LineChart.Group>\n        <LineChart id=\"one\">\n          <LineChart.Path color=\"blue\" />\n          <LineChart.CursorCrosshair\n            onActivated={invokeHaptic}\n            onEnded={invokeHaptic}\n          >\n            <LineChart.Tooltip />\n          </LineChart.CursorCrosshair>\n        </LineChart>\n        <LineChart id=\"two\">\n          <LineChart.Path color=\"red\">\n            <LineChart.Gradient color=\"black\" />\n            <LineChart.HorizontalLine at={{ index: 4 }} />\n          </LineChart.Path>\n          <LineChart.CursorCrosshair\n            onActivated={invokeHaptic}\n            onEnded={invokeHaptic}\n          >\n            <LineChart.Tooltip />\n          </LineChart.CursorCrosshair>\n        </LineChart>\n      </LineChart.Group>\n    );\n  }\n\n  return (\n    <>\n      <Heading.H5 paddingX=\"major-2\" marginBottom=\"major-2\">\n        Line Chart 📈\n      </Heading.H5>\n      <LineChart.Provider\n        xLength={partialDay ? data.length * 2 : undefined}\n        yRange={{\n          min:\n            yRange === 'low'\n              ? Math.min(...data.map((d) => d.value)) / 1.1\n              : undefined,\n          max:\n            yRange === 'high'\n              ? Math.max(...data.map((d) => d.value)) * 1.1\n              : undefined,\n        }}\n        data={dataProp}\n      >\n        {chart}\n        <Box marginX=\"major-2\" marginTop=\"major-2\">\n          <Heading.H6 marginBottom={'major-2'}>Load Data</Heading.H6>\n          <Flex flexWrap={'wrap'}>\n            <Button onPress={() => setData(mockData)}>Data 1</Button>\n            <Button onPress={() => setData(mockData2)}>Data 2</Button>\n            <Button onPress={() => setData([...mockData, ...mockData2])}>\n              Data 1 + Data 2\n            </Button>\n            <Button onPress={() => setData([...mockData2, ...mockData])}>\n              Data 2 + Data 1\n            </Button>\n            <Button\n              onPress={() => setData([...mockData2, ...mockData, ...mockData2])}\n            >\n              Data 2 + Data 1 + Data 2\n            </Button>\n            <Button\n              onPress={() =>\n                setData([\n                  ...mockData2,\n                  ...mockData,\n                  ...mockData2,\n                  ...mockData,\n                  ...mockData,\n                  ...mockData2,\n                  ...mockData2,\n                  ...mockData,\n                  ...mockData2,\n                  ...mockData,\n                  ...mockData,\n                  ...mockData2,\n                ])\n              }\n            >\n              V large data\n            </Button>\n            <Button onPress={toggleYRange}>\n              {`${yRange || 'Set'} Y Domain`}\n            </Button>\n            <Button onPress={toggleMultiData}>{`Multi Data`}</Button>\n            <Button onPress={togglePartialDay}>{`Partial Day`}</Button>\n          </Flex>\n        </Box>\n        {!multiData && (\n          <Stack padding=\"major-2\" spacing=\"major-1\">\n            <Heading.H6>PriceText</Heading.H6>\n            <Flex>\n              <Text fontWeight=\"500\">Formatted: </Text>\n              <LineChart.PriceText />\n            </Flex>\n            <Flex>\n              <Text fontWeight=\"500\">Value: </Text>\n              <LineChart.PriceText variant=\"value\" />\n            </Flex>\n            <Flex>\n              <Text fontWeight=\"500\">Custom format: </Text>\n              <LineChart.PriceText\n                format={(d) => {\n                  'worklet';\n                  return d.formatted ? `$${d.formatted} AUD` : '';\n                }}\n              />\n            </Flex>\n            <Heading.H6>DatetimeText</Heading.H6>\n            <Flex>\n              <Text fontWeight=\"500\">Formatted: </Text>\n              <LineChart.DatetimeText />\n            </Flex>\n            <Flex>\n              <Text fontWeight=\"500\">Value: </Text>\n              <LineChart.DatetimeText variant=\"value\" />\n            </Flex>\n            <Flex>\n              <Text fontWeight=\"500\">Custom format: </Text>\n              <LineChart.DatetimeText\n                locale=\"en-AU\"\n                options={{\n                  year: 'numeric',\n                  month: 'numeric',\n                  day: 'numeric',\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  second: 'numeric',\n                }}\n              />\n            </Flex>\n          </Stack>\n        )}\n      </LineChart.Provider>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}