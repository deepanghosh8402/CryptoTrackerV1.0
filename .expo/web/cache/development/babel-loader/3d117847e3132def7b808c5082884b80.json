{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Animated, { withTiming, useAnimatedProps } from 'react-native-reanimated';\nimport { Line, Rect } from 'react-native-svg';\nimport { getY, getHeight } from \"./utils\";\nvar AnimatedRect = Animated.createAnimatedComponent(Rect);\nvar AnimatedLine = Animated.createAnimatedComponent(Line);\nexport var CandlestickChartCandle = function CandlestickChartCandle(_ref) {\n  var candle = _ref.candle,\n      maxHeight = _ref.maxHeight,\n      domain = _ref.domain,\n      _ref$margin = _ref.margin,\n      margin = _ref$margin === void 0 ? 2 : _ref$margin,\n      _ref$positiveColor = _ref.positiveColor,\n      positiveColor = _ref$positiveColor === void 0 ? '#10b981' : _ref$positiveColor,\n      _ref$negativeColor = _ref.negativeColor,\n      negativeColor = _ref$negativeColor === void 0 ? '#ef4444' : _ref$negativeColor,\n      overrideRectProps = _ref.rectProps,\n      overrideLineProps = _ref.lineProps,\n      index = _ref.index,\n      width = _ref.width,\n      _ref$useAnimations = _ref.useAnimations,\n      useAnimations = _ref$useAnimations === void 0 ? true : _ref$useAnimations,\n      _ref$renderLine = _ref.renderLine,\n      renderLine = _ref$renderLine === void 0 ? function (props) {\n    return props.useAnimations ? React.createElement(AnimatedLine, props) : React.createElement(Line, props);\n  } : _ref$renderLine,\n      _ref$renderRect = _ref.renderRect,\n      renderRect = _ref$renderRect === void 0 ? function (props) {\n    return props.useAnimations ? React.createElement(AnimatedRect, props) : React.createElement(Rect, props);\n  } : _ref$renderRect;\n  var close = candle.close,\n      open = candle.open,\n      high = candle.high,\n      low = candle.low;\n  var isPositive = close > open;\n  var fill = isPositive ? positiveColor : negativeColor;\n  var x = index * width;\n  var max = Math.max(open, close);\n  var min = Math.min(open, close);\n  var lineProps = React.useMemo(function () {\n    return _objectSpread({\n      stroke: fill,\n      strokeWidth: 1,\n      direction: isPositive ? 'positive' : 'negative',\n      x1: x + width / 2,\n      y1: getY({\n        maxHeight: maxHeight,\n        value: low,\n        domain: domain\n      }),\n      x2: x + width / 2,\n      y2: getY({\n        maxHeight: maxHeight,\n        value: high,\n        domain: domain\n      })\n    }, overrideLineProps);\n  }, [domain, fill, high, isPositive, low, maxHeight, overrideLineProps, width, x]);\n  var animatedLineProps = useAnimatedProps(function () {\n    var _f = function _f() {\n      return {\n        x1: withTiming(x + width / 2),\n        y1: withTiming(getY({\n          maxHeight: maxHeight,\n          value: low,\n          domain: domain\n        })),\n        x2: withTiming(x + width / 2),\n        y2: withTiming(getY({\n          maxHeight: maxHeight,\n          value: high,\n          domain: domain\n        }))\n      };\n    };\n\n    _f._closure = {\n      withTiming: withTiming,\n      x: x,\n      width: width,\n      getY: getY,\n      maxHeight: maxHeight,\n      low: low,\n      domain: domain,\n      high: high\n    };\n    _f.asString = \"function _f(){const{withTiming,x,width,getY,maxHeight,low,domain,high}=jsThis._closure;{return{x1:withTiming(x+width/2),y1:withTiming(getY({maxHeight:maxHeight,value:low,domain:domain})),x2:withTiming(x+width/2),y2:withTiming(getY({maxHeight:maxHeight,value:high,domain:domain}))};}}\";\n    _f.__workletHash = 13702006910808;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\candle\\\\Candle.js (51:45)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var rectProps = React.useMemo(function () {\n    return _objectSpread({\n      width: width - margin * 2,\n      fill: fill,\n      direction: isPositive ? 'positive' : 'negative',\n      x: x + margin,\n      y: getY({\n        maxHeight: maxHeight,\n        value: max,\n        domain: domain\n      }),\n      height: getHeight({\n        maxHeight: maxHeight,\n        value: max - min,\n        domain: domain\n      })\n    }, overrideRectProps);\n  }, [domain, fill, isPositive, margin, max, maxHeight, min, overrideRectProps, width, x]);\n  var animatedRectProps = useAnimatedProps(function () {\n    var _f = function _f() {\n      return {\n        x: withTiming(x + margin),\n        y: withTiming(getY({\n          maxHeight: maxHeight,\n          value: max,\n          domain: domain\n        })),\n        height: withTiming(getHeight({\n          maxHeight: maxHeight,\n          value: max - min,\n          domain: domain\n        }))\n      };\n    };\n\n    _f._closure = {\n      withTiming: withTiming,\n      x: x,\n      margin: margin,\n      getY: getY,\n      maxHeight: maxHeight,\n      max: max,\n      domain: domain,\n      getHeight: getHeight,\n      min: min\n    };\n    _f.asString = \"function _f(){const{withTiming,x,margin,getY,maxHeight,max,domain,getHeight,min}=jsThis._closure;{return{x:withTiming(x+margin),y:withTiming(getY({maxHeight:maxHeight,value:max,domain:domain})),height:withTiming(getHeight({maxHeight:maxHeight,value:max-min,domain:domain}))};}}\";\n    _f.__workletHash = 17054797206412;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\candle\\\\Candle.js (82:45)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return React.createElement(React.Fragment, null, renderLine(_objectSpread(_objectSpread({}, lineProps), {}, {\n    useAnimations: useAnimations\n  }, useAnimations ? {\n    animatedProps: animatedLineProps\n  } : {})), renderRect(_objectSpread(_objectSpread({}, rectProps), {}, {\n    useAnimations: useAnimations\n  }, useAnimations ? {\n    animatedProps: animatedRectProps\n  } : {})));\n};","map":{"version":3,"sources":["Candle.tsx"],"names":["Rect","getHeight","AnimatedRect","Animated","AnimatedLine","CandlestickChartCandle","maxHeight","domain","margin","positiveColor","negativeColor","rectProps","lineProps","useAnimations","renderLine","props","renderRect","low","isPositive","close","fill","x","index","max","Math","min","stroke","strokeWidth","direction","x1","width","y1","getY","value","x2","y2","overrideLineProps","animatedLineProps","useAnimatedProps","withTiming","y","height","overrideRectProps","animatedRectProps","animatedProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Animated, {\n  withTiming,\n  useAnimatedProps,\n} from 'react-native-reanimated';\nimport {\n  Color,\n  Line,\n  LineProps,\n  NumberProp,\n  Rect,\n  RectProps,\n} from 'react-native-svg';\n\nimport type { TCandle, TDomain } from './types';\nimport { getY, getHeight } from './utils';\n\nconst AnimatedRect = Animated.createAnimatedComponent(Rect);\nconst AnimatedLine = Animated.createAnimatedComponent(Line);\n\nexport type CandlestickChartCandleProps = {\n  candle: TCandle;\n  domain: TDomain;\n  maxHeight: number;\n  margin?: number;\n  positiveColor?: string;\n  negativeColor?: string;\n  index: number;\n  width: number;\n  rectProps?: RectProps;\n  lineProps?: LineProps;\n  useAnimations?: boolean;\n  renderRect?: ({\n    x,\n    y,\n    width,\n    height,\n    fill,\n  }: {\n    x: NumberProp;\n    y: NumberProp;\n    width: NumberProp;\n    height: NumberProp;\n    fill: Color;\n    useAnimations: boolean;\n  }) => React.ReactNode;\n  renderLine?: ({\n    x1,\n    y1,\n    x2,\n    y2,\n    stroke,\n    strokeWidth,\n  }: {\n    x1: NumberProp;\n    y1: NumberProp;\n    x2: NumberProp;\n    y2: NumberProp;\n    stroke: Color;\n    strokeWidth: NumberProp;\n    useAnimations: boolean;\n  }) => React.ReactNode;\n};\n\nexport const CandlestickChartCandle = ({\n  candle,\n  maxHeight,\n  domain,\n  margin = 2,\n  positiveColor = '#10b981',\n  negativeColor = '#ef4444',\n  rectProps: overrideRectProps,\n  lineProps: overrideLineProps,\n  index,\n  width,\n  useAnimations = true,\n  renderLine = (props) =>\n    props.useAnimations ? <AnimatedLine {...props} /> : <Line {...props} />,\n  renderRect = (props) =>\n    props.useAnimations ? <AnimatedRect {...props} /> : <Rect {...props} />,\n}: CandlestickChartCandleProps) => {\n  const { close, open, high, low } = candle;\n  const isPositive = close > open;\n  const fill = isPositive ? positiveColor : negativeColor;\n  const x = index * width;\n  const max = Math.max(open, close);\n  const min = Math.min(open, close);\n\n  const lineProps = React.useMemo(\n    () => ({\n      stroke: fill,\n      strokeWidth: 1,\n      direction: isPositive ? 'positive' : 'negative',\n      x1: x + width / 2,\n      y1: getY({ maxHeight, value: low, domain }),\n      x2: x + width / 2,\n      y2: getY({ maxHeight, value: high, domain }),\n      ...overrideLineProps,\n    }),\n    [\n      domain,\n      fill,\n      high,\n      isPositive,\n      low,\n      maxHeight,\n      overrideLineProps,\n      width,\n      x,\n    ]\n  );\n  const animatedLineProps = useAnimatedProps(() => ({\n    x1: withTiming(x + width / 2),\n    y1: withTiming(getY({ maxHeight, value: low, domain })),\n    x2: withTiming(x + width / 2),\n    y2: withTiming(getY({ maxHeight, value: high, domain })),\n  }));\n\n  const rectProps = React.useMemo(\n    () => ({\n      width: width - margin * 2,\n      fill: fill,\n      direction: isPositive ? 'positive' : 'negative',\n      x: x + margin,\n      y: getY({ maxHeight, value: max, domain }),\n      height: getHeight({ maxHeight, value: max - min, domain }),\n      ...overrideRectProps,\n    }),\n    [\n      domain,\n      fill,\n      isPositive,\n      margin,\n      max,\n      maxHeight,\n      min,\n      overrideRectProps,\n      width,\n      x,\n    ]\n  );\n  const animatedRectProps = useAnimatedProps(() => ({\n    x: withTiming(x + margin),\n    y: withTiming(getY({ maxHeight, value: max, domain })),\n    height: withTiming(getHeight({ maxHeight, value: max - min, domain })),\n  }));\n\n  return (\n    <>\n      {renderLine({\n        ...lineProps,\n        useAnimations,\n        ...(useAnimations ? { animatedProps: animatedLineProps } : {}),\n      })}\n      {renderRect({\n        ...rectProps,\n        useAnimations,\n        ...(useAnimations ? { animatedProps: animatedRectProps } : {}),\n      })}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}