{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport Svg, { Line as SVGLine } from 'react-native-svg';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport { LineChartCursor } from \"./Cursor\";\nimport { useLineChart } from \"./useLineChart\";\nLineChartCursorLine.displayName = 'LineChartCursorLine';\nexport function LineChartCursorLine(_ref) {\n  var children = _ref.children,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'gray' : _ref$color,\n      _ref$lineProps = _ref.lineProps,\n      lineProps = _ref$lineProps === void 0 ? {} : _ref$lineProps;\n\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n      height = _React$useContext.height;\n\n  var _useLineChart = useLineChart(),\n      currentX = _useLineChart.currentX,\n      isActive = _useLineChart.isActive;\n\n  var vertical = useAnimatedStyle(function () {\n    var _f = function _f() {\n      return {\n        opacity: isActive.value ? 1 : 0,\n        height: '100%',\n        transform: [{\n          translateX: currentX.value\n        }]\n      };\n    };\n\n    _f._closure = {\n      isActive: isActive,\n      currentX: currentX\n    };\n    _f.asString = \"function _f(){const{isActive,currentX}=jsThis._closure;{return{opacity:isActive.value?1:0,height:'100%',transform:[{translateX:currentX.value}]};}}\";\n    _f.__workletHash = 1054467953528;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\CursorLine.js (23:36)\";\n    _f.__optimalization = 3;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return React.createElement(LineChartCursor, {\n    type: \"line\"\n  }, React.createElement(Animated.View, {\n    style: vertical\n  }, React.createElement(Svg, {\n    style: styles.svg\n  }, React.createElement(SVGLine, _extends({\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: height,\n    strokeWidth: 2,\n    stroke: color,\n    strokeDasharray: \"3 3\"\n  }, lineProps)))), children);\n}\nvar styles = StyleSheet.create({\n  svg: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    height: '100%'\n  })\n});","map":{"version":3,"sources":["CursorLine.tsx"],"names":["React","Line","LineChartCursorLine","color","lineProps","height","isActive","useLineChart","vertical","useAnimatedStyle","opacity","transform","translateX","currentX","value","styles","svg","StyleSheet"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAA,OAAA;;AAEA,OAAA,QAAA,IAAA,gBAAA,QAAA,yBAAA;AACA,OAAA,GAAA,IAAcC,IAAI,IAAlB,OAAA,QAAA,kBAAA;AAEA,SAAA,0BAAA;AACA,SAAA,eAAA;AACA,SAAA,YAAA;AAQAC,mBAAmB,CAAnBA,WAAAA,GAAAA,qBAAAA;AAEA,OAAO,SAAA,mBAAA,OAIsB;AAAA,MAJO,QAIP,QAJO,QAIP;AAAA,wBAF3BC,KAE2B;AAAA,MAF3BA,KAE2B,2BAJO,MAIP;AAAA,4BAD3BC,SAC2B;AAAA,MAD3BA,SAC2B,+BADf,EACe;;AAC3B,0BAAmBJ,KAAK,CAALA,UAAAA,CAAnB,0BAAmBA,CAAnB;AAAA,MAAQK,MAAR,qBAAQA,MAAR;;AACA,sBAA+BE,YAA/B,EAAA;AAAA,MAAM,QAAN,iBAAM,QAAN;AAAA,MAAkBD,QAAlB,iBAAkBA,QAAlB;;AAEA,MAAME,QAAQ,GAAGC,gBAAgB;AAAA,aAAC;AAAA,aAAO;AACvCC,QAAAA,OAAO,EAAEJ,QAAQ,CAARA,KAAAA,GAAAA,CAAAA,GAD8B,CAAA;AAEvCD,QAAAA,MAAM,EAFiC,MAAA;AAGvCM,QAAAA,SAAS,EAAE,CAAC;AAAEC,UAAAA,UAAU,EAAEC,QAAQ,CAACC;AAAvB,SAAD;AAH4B,OAAP;AAAA,KAAD;;AAAA;AAAA,gBAzBnC,QAyBmC;AAAA,gBAtBrBb;AAsBqB;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAjC;AAMA,SACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAiB,IAAA,IAAI,EAAC;AAAtB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AAAe,IAAA,KAAK,EAAEO;AAAtB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,IAAA,KAAK,EAAEO,MAAM,CAACC;AAAnB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AACE,IAAA,EAAE,EADJ,CAAA;AAEE,IAAA,EAAE,EAFJ,CAAA;AAGE,IAAA,EAAE,EAHJ,CAAA;AAIE,IAAA,EAAE,EAJJ,MAAA;AAKE,IAAA,WAAW,EALb,CAAA;AAME,IAAA,MAAM,EANR,KAAA;AAOE,IAAA,eAAe,EAAC;AAPlB,GAAA,EAHN,SAGM,CAAA,CADF,CADF,CADF,EADF,QACE,CADF;AAmBD;AAED,IAAMD,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,GAAG,kCACEC,UAAU,CADV,kBAAF;AAGDZ,IAAAA,MAAM,EAAE;AAHP;AAD4B,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport Svg, { Line as SVGLine, LineProps } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartCursor } from './Cursor';\nimport { useLineChart } from './useLineChart';\n\ntype LineChartCursorLineProps = {\n  children?: React.ReactNode;\n  color?: string;\n  lineProps?: Partial<LineProps>;\n};\n\nLineChartCursorLine.displayName = 'LineChartCursorLine';\n\nexport function LineChartCursorLine({\n  children,\n  color = 'gray',\n  lineProps = {},\n}: LineChartCursorLineProps) {\n  const { height } = React.useContext(LineChartDimensionsContext);\n  const { currentX, isActive } = useLineChart();\n\n  const vertical = useAnimatedStyle(() => ({\n    opacity: isActive.value ? 1 : 0,\n    height: '100%',\n    transform: [{ translateX: currentX.value }],\n  }));\n\n  return (\n    <LineChartCursor type=\"line\">\n      <Animated.View style={vertical}>\n        <Svg style={styles.svg}>\n          <SVGLine\n            x1={0}\n            y1={0}\n            x2={0}\n            y2={height}\n            strokeWidth={2}\n            stroke={color}\n            strokeDasharray=\"3 3\"\n            {...lineProps}\n          />\n        </Svg>\n      </Animated.View>\n      {children}\n    </LineChartCursor>\n  );\n}\n\nconst styles = StyleSheet.create({\n  svg: {\n    ...StyleSheet.absoluteFillObject,\n    // height: 100% is required for <svg /> on web\n    height: '100%',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}