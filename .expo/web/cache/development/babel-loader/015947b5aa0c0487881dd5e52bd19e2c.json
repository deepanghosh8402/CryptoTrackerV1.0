{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"inactiveColor\", \"showInactiveColor\", \"from\", \"to\", \"width\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Path } from 'react-native-svg';\nimport { LineChartDimensionsContext } from \"./Chart\";\nimport { LineChartPathContext } from \"./ChartPath\";\nimport useAnimatedPath from \"./useAnimatedPath\";\nimport { useLineChart } from \"./useLineChart\";\nimport { getPath } from \"./utils\";\nvar AnimatedPath = Animated.createAnimatedComponent(Path);\nLineChartHighlight.displayName = 'LineChartHighlight';\nexport function LineChartHighlight(_ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'black' : _ref$color,\n      inactiveColor = _ref.inactiveColor,\n      _ref$showInactiveColo = _ref.showInactiveColor,\n      showInactiveColor = _ref$showInactiveColo === void 0 ? true : _ref$showInactiveColo,\n      from = _ref.from,\n      to = _ref.to,\n      _ref$width = _ref.width,\n      strokeWidth = _ref$width === void 0 ? 3 : _ref$width,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useLineChart = useLineChart(),\n      data = _useLineChart.data,\n      yDomain = _useLineChart.yDomain;\n\n  var _React$useContext = React.useContext(LineChartDimensionsContext),\n      pathWidth = _React$useContext.pathWidth,\n      height = _React$useContext.height,\n      gutter = _React$useContext.gutter,\n      shape = _React$useContext.shape;\n\n  var _React$useContext2 = React.useContext(LineChartPathContext),\n      isTransitionEnabled = _React$useContext2.isTransitionEnabled,\n      _isInactive = _React$useContext2.isInactive;\n\n  var isInactive = showInactiveColor && _isInactive;\n  var path = React.useMemo(function () {\n    if (data && data.length > 0) {\n      return getPath({\n        data: data,\n        from: from,\n        to: to,\n        width: pathWidth,\n        height: height,\n        gutter: gutter,\n        shape: shape,\n        yDomain: yDomain\n      });\n    }\n\n    return '';\n  }, [data, from, to, pathWidth, height, gutter, shape, yDomain]);\n\n  var _useAnimatedPath = useAnimatedPath({\n    enabled: isTransitionEnabled,\n    path: path\n  }),\n      animatedProps = _useAnimatedPath.animatedProps;\n\n  return React.createElement(React.Fragment, null, React.createElement(AnimatedPath, _extends({\n    animatedProps: animatedProps,\n    fill: \"transparent\",\n    stroke: isInactive ? inactiveColor || color : color,\n    strokeWidth: strokeWidth,\n    strokeOpacity: isInactive && !inactiveColor ? 0.5 : 1\n  }, props)));\n}","map":{"version":3,"sources":["Highlight.tsx"],"names":["AnimatedPath","Animated","LineChartHighlight","color","showInactiveColor","width","strokeWidth","props","yDomain","useLineChart","shape","React","isInactive","_isInactive","path","data","getPath","from","to","height","gutter","animatedProps","useAnimatedPath","enabled","inactiveColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,QAAA,MAAA,yBAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AAEA,SAAA,0BAAA;AACA,SAAA,oBAAA;AACA,OAAA,eAAA;AACA,SAAA,YAAA;AACA,SAAA,OAAA;AAEA,IAAMA,YAAY,GAAGC,QAAQ,CAARA,uBAAAA,CAArB,IAAqBA,CAArB;AAWAC,kBAAkB,CAAlBA,WAAAA,GAAAA,oBAAAA;AAEA,OAAO,SAAA,kBAAA,OAQiB;AAAA,wBAPtBC,KAOsB;AAAA,MAPtBA,KAOsB,2BARW,OAQX;AAAA,MARW,aAQX,QARW,aAQX;AAAA,mCALtBC,iBAKsB;AAAA,MALtBA,iBAKsB,sCARW,IAQX;AAAA,MARW,IAQX,QARW,IAQX;AAAA,MARW,EAQX,QARW,EAQX;AAAA,wBAFtBC,KAEsB;AAAA,MAFfC,WAEe,2BARW,CAQX;AAAA,MADnBC,KACmB;;AACtB,sBAA0BE,YAA1B,EAAA;AAAA,MAAM,IAAN,iBAAM,IAAN;AAAA,MAAcD,OAAd,iBAAcA,OAAd;;AACA,0BAA6CG,KAAK,CAALA,UAAAA,CAA7C,0BAA6CA,CAA7C;AAAA,MAAM,SAAN,qBAAM,SAAN;AAAA,MAAM,MAAN,qBAAM,MAAN;AAAA,MAAM,MAAN,qBAAM,MAAN;AAAA,MAAmCD,KAAnC,qBAAmCA,KAAnC;;AAGA,2BACEC,KAAK,CAALA,UAAAA,CADF,oBACEA,CADF;AAAA,MAAM,mBAAN,sBAAM,mBAAN;AAAA,MAAyCE,WAAzC,sBAA6BD,UAA7B;;AAEA,MAAMA,UAAU,GAAGR,iBAAiB,IAPd,WAOtB;AAIA,MAAMU,IAAI,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;AAC/B,QAAIC,IAAI,IAAIA,IAAI,CAAJA,MAAAA,GAAZ,CAAA,EAA6B;AAC3B,aAAOC,OAAO,CAAC;AACbD,QAAAA,IADa,EACbA,IADa;AAEbE,QAAAA,IAFa,EAEbA,IAFa;AAGbC,QAAAA,EAHa,EAGbA,EAHa;AAIbb,QAAAA,KAAK,EAJQ,SAAA;AAKbc,QAAAA,MALa,EAKbA,MALa;AAMbC,QAAAA,MANa,EAMbA,MANa;AAObV,QAAAA,KAPa,EAObA,KAPa;AAQbF,QAAAA,OAAAA,EAAAA;AARa,OAAD,CAAd;AAUD;;AACD,WAAA,EAAA;AAbW,GAAA,EAcV,CAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,SAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAdH,OAcG,CAdU,CAAb;;AAgBA,yBAA0Bc,eAAe,CAAC;AACxCC,IAAAA,OAAO,EADiC,mBAAA;AAExCT,IAAAA,IAAAA,EAAAA;AAFwC,GAAD,CAAzC;AAAA,MAAQO,aAAR,oBAAQA,aAAR;;AAOA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA;AACE,IAAA,aAAa,EADf,aAAA;AAEE,IAAA,IAAI,EAFN,aAAA;AAGE,IAAA,MAAM,EAAET,UAAU,GAAGY,aAAa,IAAhB,KAAA,GAHpB,KAAA;AAIE,IAAA,WAAW,EAJb,WAAA;AAKE,IAAA,aAAa,EAAEZ,UAAU,IAAI,CAAdA,aAAAA,GAAAA,GAAAA,GAAqC;AALtD,GAAA,EAFJ,KAEI,CAAA,CADF,CADF;AAYD","sourcesContent":["import * as React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { Path, PathProps } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPathContext } from './ChartPath';\nimport useAnimatedPath from './useAnimatedPath';\nimport { useLineChart } from './useLineChart';\nimport { getPath } from './utils';\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\n\nexport type LineChartColorProps = Animated.AnimateProps<PathProps> & {\n  color?: string;\n  from: number;\n  to: number;\n  showInactiveColor?: boolean;\n  inactiveColor?: string;\n  width?: number;\n};\n\nLineChartHighlight.displayName = 'LineChartHighlight';\n\nexport function LineChartHighlight({\n  color = 'black',\n  inactiveColor,\n  showInactiveColor = true,\n  from,\n  to,\n  width: strokeWidth = 3,\n  ...props\n}: LineChartColorProps) {\n  const { data, yDomain } = useLineChart();\n  const { pathWidth, height, gutter, shape } = React.useContext(\n    LineChartDimensionsContext\n  );\n  const { isTransitionEnabled, isInactive: _isInactive } =\n    React.useContext(LineChartPathContext);\n  const isInactive = showInactiveColor && _isInactive;\n\n  ////////////////////////////////////////////////\n\n  const path = React.useMemo(() => {\n    if (data && data.length > 0) {\n      return getPath({\n        data,\n        from,\n        to,\n        width: pathWidth,\n        height,\n        gutter,\n        shape,\n        yDomain,\n      });\n    }\n    return '';\n  }, [data, from, to, pathWidth, height, gutter, shape, yDomain]);\n\n  const { animatedProps } = useAnimatedPath({\n    enabled: isTransitionEnabled,\n    path,\n  });\n\n  ////////////////////////////////////////////////\n\n  return (\n    <>\n      <AnimatedPath\n        animatedProps={animatedProps}\n        fill=\"transparent\"\n        stroke={isInactive ? inactiveColor || color : color}\n        strokeWidth={strokeWidth}\n        strokeOpacity={isInactive && !inactiveColor ? 0.5 : 1}\n        {...props}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}