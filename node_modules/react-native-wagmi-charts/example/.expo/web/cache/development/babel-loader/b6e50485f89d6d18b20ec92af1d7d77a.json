{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar defaultOptions = {\n  enableVibrateFallback: false,\n  ignoreAndroidSystemSettings: false\n};\n\nvar RNReactNativeHapticFeedback = function RNReactNativeHapticFeedback() {\n  _classCallCheck(this, RNReactNativeHapticFeedback);\n};\n\nRNReactNativeHapticFeedback.trigger = function () {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'selection';\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var triggerOptions = createTriggerOptions(options);\n\n  try {\n    NativeModules.RNReactNativeHapticFeedback.trigger(type, triggerOptions);\n  } catch (err) {\n    console.warn('RNReactNativeHapticFeedback is not available');\n  }\n};\n\nvar createTriggerOptions = function createTriggerOptions(options) {\n  if (typeof options === 'boolean') {\n    return _objectSpread(_objectSpread({}, defaultOptions), {}, {\n      enableVibrateFallback: options\n    });\n  } else {\n    return _objectSpread(_objectSpread({}, defaultOptions), options);\n  }\n};\n\nexport default RNReactNativeHapticFeedback;","map":{"version":3,"sources":["/Users/jake/git/react-native-candlestick-chart/example/node_modules/react-native-haptic-feedback/index.js"],"names":["defaultOptions","enableVibrateFallback","ignoreAndroidSystemSettings","RNReactNativeHapticFeedback","trigger","type","options","triggerOptions","createTriggerOptions","NativeModules","err","console","warn"],"mappings":";;;;;;;;AAEA,IAAMA,cAAc,GAAG;AACnBC,EAAAA,qBAAqB,EAAE,KADJ;AAEnBC,EAAAA,2BAA2B,EAAE;AAFV,CAAvB;;IAKMC,2B;;;;AAAAA,2B,CACKC,O,GAAU,YAAsC;AAAA,MAArCC,IAAqC,uEAA9B,WAA8B;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AACnD,MAAMC,cAAc,GAAGC,oBAAoB,CAACF,OAAD,CAA3C;;AAEA,MAAI;AACAG,IAAAA,aAAa,CAACN,2BAAd,CAA0CC,OAA1C,CAAkDC,IAAlD,EAAwDE,cAAxD;AACH,GAFD,CAEE,OAAOG,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,IAAR,CAAa,8CAAb;AACH;AACJ,C;;AAGL,IAAMJ,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAF,OAAO,EAAI;AAEpC,MAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;AAC9B,2CACON,cADP;AAEIC,MAAAA,qBAAqB,EAAEK;AAF3B;AAIH,GALD,MAKO;AACH,2CAAYN,cAAZ,GAA+BM,OAA/B;AACH;AACJ,CAVD;;AAYA,eAAeH,2BAAf","sourcesContent":["import { NativeModules } from 'react-native';\n\nconst defaultOptions = {\n    enableVibrateFallback: false,\n    ignoreAndroidSystemSettings: false,\n}\n\nclass RNReactNativeHapticFeedback {\n    static trigger = (type = 'selection', options = {}) => {\n        const triggerOptions = createTriggerOptions(options)\n\n        try {\n            NativeModules.RNReactNativeHapticFeedback.trigger(type, triggerOptions);\n        } catch (err) {\n            console.warn('RNReactNativeHapticFeedback is not available');\n        }\n    }\n}\n\nconst createTriggerOptions = options => {\n    // if options is a boolean we're using an api <=1.6 and we should pass use it to set the enableVibrateFallback option\n    if (typeof options === 'boolean') {\n        return {\n            ...defaultOptions,\n            enableVibrateFallback: options\n        }\n    } else {\n        return { ...defaultOptions, ...options }\n    }\n}\n\nexport default RNReactNativeHapticFeedback;\n"]},"metadata":{},"sourceType":"module"}