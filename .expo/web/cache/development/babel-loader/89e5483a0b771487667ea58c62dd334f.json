{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport { useDerivedValue } from 'react-native-reanimated';\nimport { getYForX, parse } from 'react-native-redash';\nimport { LineChartContext } from \"./Context\";\nimport { LineChartDimensionsContext } from \"./Chart\";\nexport function useCurrentY() {\n  var _useContext = useContext(LineChartDimensionsContext),\n      path = _useContext.path,\n      width = _useContext.width;\n\n  var _useContext2 = useContext(LineChartContext),\n      currentX = _useContext2.currentX;\n\n  var parsedPath = useMemo(function () {\n    return path ? parse(path) : undefined;\n  }, [path]);\n  var currentY = useDerivedValue(function () {\n    var _f = function _f() {\n      if (!parsedPath) {\n        return -1;\n      }\n\n      var boundedX = Math.min(width, currentX.value);\n      return getYForX(parsedPath, boundedX) || 0;\n    };\n\n    _f._closure = {\n      parsedPath: parsedPath,\n      width: width,\n      currentX: currentX,\n      getYForX: getYForX\n    };\n    _f.asString = \"function _f(){const{parsedPath,width,currentX,getYForX}=jsThis._closure;{if(!parsedPath){return-1;}const boundedX=Math.min(width,currentX.value);return getYForX(parsedPath,boundedX)||0;}}\";\n    _f.__workletHash = 15411588648960;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\useCurrentY.js (15:35)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return currentY;\n}","map":{"version":3,"sources":["useCurrentY.ts"],"names":["width","useContext","currentX","parsedPath","useMemo","path","parse","currentY","useDerivedValue","boundedX","Math","getYForX"],"mappings":"AAAA,SAAA,UAAA,EAAA,OAAA,QAAA,OAAA;AACA,SAAA,eAAA,QAAA,yBAAA;AACA,SAAA,QAAA,EAAA,KAAA,QAAA,qBAAA;AACA,SAAA,gBAAA;AACA,SAAA,0BAAA;AAEA,OAAO,SAAA,WAAA,GAAuB;AAC5B,oBAAwBC,UAAU,CAAlC,0BAAkC,CAAlC;AAAA,MAAM,IAAN,eAAM,IAAN;AAAA,MAAcD,KAAd,eAAcA,KAAd;;AACA,qBAAqBC,UAAU,CAA/B,gBAA+B,CAA/B;AAAA,MAAQC,QAAR,gBAAQA,QAAR;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC;AAAA,WAAOC,IAAI,GAAGC,KAAK,CAAR,IAAQ,CAAR,GAAZ,SAAC;AAAA,GAAD,EAAyC,CAAnE,IAAmE,CAAzC,CAA1B;AAEA,MAAMC,QAAQ,GAAGC,eAAe;AAAA,2BAAO;AACrC,UAAI,CAAJ,UAAA,EAAiB;AACf,eAAO,CAAP,CAAA;AACD;;AACD,UAAMC,QAAQ,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAAgBR,QAAQ,CAAzC,KAAiBQ,CAAjB;AACA,aAAOC,QAAQ,CAAA,UAAA,EAARA,QAAQ,CAARA,IAAP,CAAA;AALF,KAAgC;;AAAA;AAAA,kBAJ1B,UAI0B;AAAA,aAJ1B,KAI0B;AAAA,gBAJ1B,QAI0B;AAAA,gBAJ1B;AAI0B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAhC;AAQA,SAAA,QAAA;AACD","sourcesContent":["import { useContext, useMemo } from 'react';\nimport { useDerivedValue } from 'react-native-reanimated';\nimport { getYForX, parse } from 'react-native-redash';\nimport { LineChartContext } from './Context';\nimport { LineChartDimensionsContext } from './Chart';\n\nexport function useCurrentY() {\n  const { path, width } = useContext(LineChartDimensionsContext);\n  const { currentX } = useContext(LineChartContext);\n  const parsedPath = useMemo(() => (path ? parse(path) : undefined), [path]);\n\n  const currentY = useDerivedValue(() => {\n    if (!parsedPath) {\n      return -1;\n    }\n    const boundedX = Math.min(width, currentX.value);\n    return getYForX(parsedPath, boundedX) || 0;\n  });\n\n  return currentY;\n}\n"]},"metadata":{},"sourceType":"module"}