{"ast":null,"code":"import { useDerivedValue } from 'react-native-reanimated';\nimport { formatDatetime } from \"../../utils\";\nimport { useLineChart } from \"./useLineChart\";\nexport function useLineChartDatetime() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      format = _ref.format,\n      locale = _ref.locale,\n      options = _ref.options;\n\n  var _useLineChart = useLineChart(),\n      currentIndex = _useLineChart.currentIndex,\n      data = _useLineChart.data;\n\n  var timestamp = useDerivedValue(function () {\n    var _f = function _f() {\n      if (typeof currentIndex.value === 'undefined' || currentIndex.value === -1) return '';\n      return data[currentIndex.value].timestamp;\n    };\n\n    _f._closure = {\n      currentIndex: currentIndex,\n      data: data\n    };\n    _f.asString = \"function _f(){const{currentIndex,data}=jsThis._closure;{if(typeof currentIndex.value==='undefined'||currentIndex.value===-1)return'';return data[currentIndex.value].timestamp;}}\";\n    _f.__workletHash = 2066378996241;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\useDatetime.js (13:36)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var timestampString = useDerivedValue(function () {\n    var _f = function _f() {\n      if (timestamp.value === '') return '';\n      return timestamp.value.toString();\n    };\n\n    _f._closure = {\n      timestamp: timestamp\n    };\n    _f.asString = \"function _f(){const{timestamp}=jsThis._closure;{if(timestamp.value==='')return'';return timestamp.value.toString();}}\";\n    _f.__workletHash = 5017065185275;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\useDatetime.js (17:42)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var formatted = useDerivedValue(function () {\n    var _f = function _f() {\n      var formattedDatetime = timestamp.value ? formatDatetime({\n        value: timestamp.value,\n        locale: locale,\n        options: options\n      }) : '';\n      return format ? format({\n        value: timestamp.value || -1,\n        formatted: formattedDatetime\n      }) : formattedDatetime;\n    };\n\n    _f._closure = {\n      timestamp: timestamp,\n      formatDatetime: formatDatetime,\n      locale: locale,\n      options: options,\n      format: format\n    };\n    _f.asString = \"function _f(){const{timestamp,formatDatetime,locale,options,format}=jsThis._closure;{const formattedDatetime=timestamp.value?formatDatetime({value:timestamp.value,locale:locale,options:options}):'';return format?format({value:timestamp.value||-1,formatted:formattedDatetime}):formattedDatetime;}}\";\n    _f.__workletHash = 12266397783904;\n    _f.__location = \"D:\\\\Personal\\\\00 Dossair\\\\CryptoTrackerFinal\\\\node_modules\\\\react-native-wagmi-charts\\\\lib\\\\module\\\\charts\\\\line\\\\useDatetime.js (21:36)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return {\n    value: timestampString,\n    formatted: formatted\n  };\n}","map":{"version":3,"sources":["useDatetime.ts"],"names":["format","locale","options","data","useLineChart","timestamp","useDerivedValue","currentIndex","timestampString","formatted","formattedDatetime","formatDatetime","value"],"mappings":"AAAA,SAAA,eAAA,QAAA,yBAAA;AAEA,SAAA,cAAA;AAEA,SAAA,YAAA;AAEA,OAAO,SAAA,oBAAA,GAQC;AAAA,iFARD,EAQC;AAAA,MAPNA,MAOM,QAPNA,MAOM;AAAA,MANNC,MAMM,QANNA,MAMM;AAAA,MALNC,OAKM,QALNA,OAKM;;AACN,sBAA+BE,YAA/B,EAAA;AAAA,MAAM,YAAN,iBAAM,YAAN;AAAA,MAAsBD,IAAtB,iBAAsBA,IAAtB;;AAEA,MAAME,SAAS,GAAGC,eAAe;AAAA,2BAAO;AACtC,UAAI,OAAOC,YAAY,CAAnB,KAAA,KAAA,WAAA,IAA6CA,YAAY,CAAZA,KAAAA,KAAuB,CAAxE,CAAA,EACE,OAAA,EAAA;AACF,aAAOJ,IAAI,CAACI,YAAY,CAAjBJ,KAAI,CAAJA,CAAP,SAAA;AAHF,KAAiC;;AAAA;AAAA,oBAX5B,YAW4B;AAAA,YAX5B;AAW4B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAjC;AAMA,MAAMK,eAAe,GAAGF,eAAe;AAAA,2BAAO;AAC5C,UAAID,SAAS,CAATA,KAAAA,KAAJ,EAAA,EAA4B,OAAA,EAAA;AAC5B,aAAOA,SAAS,CAATA,KAAAA,CAAP,QAAOA,EAAP;AAFF,KAAuC;;AAAA;AAAA,iBAjBlC;AAiBkC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAvC;AAKA,MAAMI,SAAS,GAAGH,eAAe;AAAA,2BAAO;AACtC,UAAMI,iBAAiB,GAAG,SAAS,CAAT,KAAA,GACtBC,cAAc,CAAC;AACbC,QAAAA,KAAK,EAAEP,SAAS,CADH,KAAA;AAEbJ,QAAAA,MAFa,EAEbA,MAFa;AAGbC,QAAAA,OAAAA,EAAAA;AAHa,OAAD,CADQ,GAA1B,EAAA;AAOA,aAAOF,MAAM,GACTA,MAAM,CAAC;AAAEY,QAAAA,KAAK,EAAEP,SAAS,CAATA,KAAAA,IAAmB,CAA5B,CAAA;AAAgCI,QAAAA,SAAS,EAAEC;AAA3C,OAAD,CADG,GAAb,iBAAA;AARF,KAAiC;;AAAA;AAAA,iBAb3B,SAa2B;AAAA,sBAxBnC,cAwBmC;AAAA,cAtBE,MAsBF;AAAA,eAtBE,OAsBF;AAAA,cAd3B;AAc2B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAjC;AAaA,SAAO;AAAEE,IAAAA,KAAK,EAAP,eAAA;AAA0BH,IAAAA,SAAAA,EAAAA;AAA1B,GAAP;AACD","sourcesContent":["import { useDerivedValue } from 'react-native-reanimated';\n\nimport { formatDatetime } from '../../utils';\nimport type { TFormatterFn } from '../candle/types';\nimport { useLineChart } from './useLineChart';\n\nexport function useLineChartDatetime({\n  format,\n  locale,\n  options,\n}: {\n  format?: TFormatterFn<number>;\n  locale?: string;\n  options?: Intl.DateTimeFormatOptions;\n} = {}) {\n  const { currentIndex, data } = useLineChart();\n\n  const timestamp = useDerivedValue(() => {\n    if (typeof currentIndex.value === 'undefined' || currentIndex.value === -1)\n      return '';\n    return data[currentIndex.value].timestamp;\n  });\n\n  const timestampString = useDerivedValue(() => {\n    if (timestamp.value === '') return '';\n    return timestamp.value.toString();\n  });\n\n  const formatted = useDerivedValue(() => {\n    const formattedDatetime = timestamp.value\n      ? formatDatetime({\n          value: timestamp.value,\n          locale,\n          options,\n        })\n      : '';\n    return format\n      ? format({ value: timestamp.value || -1, formatted: formattedDatetime })\n      : formattedDatetime;\n  });\n\n  return { value: timestampString, formatted };\n}\n"]},"metadata":{},"sourceType":"module"}